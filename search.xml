<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2022/04/17/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<span id="more"></span>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>First learning record</title>
    <url>/2022/04/24/record01/</url>
    <content><![CDATA[<p>分享第一周学习内容</p>
<span id="more"></span>
<h1 id="leetcode-热题HOT-100"><a href="#leetcode-热题HOT-100" class="headerlink" title="leetcode 热题HOT 100"></a>leetcode 热题HOT 100</h1><h2 id="1-两数相加"><a href="#1-两数相加" class="headerlink" title="1.两数相加"></a>1.两数相加</h2><p>给定一个整数数组nums和一个整数目标值target请你在该数组中找出和为目标值target的那 两个整数，并返回它们的数组下标。你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。你可以按任意顺序返回答案。</p>
<img src="/2022/04/24/record01/example01.jpg" class="" title="这是一张图片">

<p>先贴出答案，然后一步步讲解。</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">twoSum</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">        map&lt;<span class="type">int</span>,<span class="type">int</span>&gt; a; </span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">b</span><span class="params">(<span class="number">2</span>,<span class="number">-1</span>)</span></span>; </span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; nums.<span class="built_in">size</span>();i++)</span><br><span class="line">            a.<span class="built_in">insert</span>(map&lt;<span class="type">int</span>,<span class="type">int</span>&gt;::<span class="built_in">value_type</span>(nums[i],i));</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; nums.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(a.<span class="built_in">count</span>(target - nums[i]) != <span class="number">0</span> &amp;&amp; (a[target - nums[i]] != i))&#123;</span><br><span class="line">                b[<span class="number">0</span>] = i;</span><br><span class="line">                b[<span class="number">1</span>] = a[target - nums[i]];</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>通常的作法为逐步尝试，首先第一个加第二个，再第一个加第三个……思路虽然简单暴力但运行速度慢且内存空间消耗大<br>此代码采用的</p>
<ul>
<li><p>开始逐行分析与知识点回顾</p>
  <figure class="highlight perl"><table><tr><td class="code"><pre><span class="line"><span class="keyword">map</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; a; <span class="regexp">//</span>创建名为a的<span class="keyword">map</span>容器，key与val的类型均为<span class="keyword">int</span></span><br></pre></td></tr></table></figure>

<p>  回顾map容器的相关知识：<br>  1.map容器里的数值都是pair—&gt;成对出现 分别为键值key与实值val<br>  2.我们可以通过key的索引查到对应的val<br>  3.map不允许有重复的键值key存在<br>  3.所有元素都会根据你所存的键值key进行自动排序<br>  4.其中&lt;int,int&gt;  左边int代表key的类型为int  右边的int代表val为int</p>
<p>  作用为：存储nums里的元素</p>
  <figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">vector</span>&lt;int&gt; b(<span class="number">2</span>,-<span class="number">1</span>);//创建名为b的vector容器，<span class="number">2</span>代表初始长度，里面的值均为-<span class="number">1</span>，存储nums里能满足target的两个值</span><br></pre></td></tr></table></figure>

<p>  回顾vector容器的相关知识：<br>  1.与数组结构非常相似，与数组不同点在于数组是静态，而vector是动态扩展</p>
  <figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="built_in">int</span> i = <span class="number">0</span>;i &lt; nums.size<span class="literal">()</span>;i++)</span><br><span class="line">    a.insert(map&lt;<span class="built_in">int</span>,<span class="built_in">int</span>&gt;::value<span class="constructor">_type(<span class="params">nums</span>[<span class="params">i</span>],<span class="params">i</span>)</span>);</span><br></pre></td></tr></table></figure>
<p>  涉及到的知识：<br>  1.nums.size()表示的是整数数组nums的长度<br>  2.a.insert是调用map容器里的函数insert：在map中插入元素<br>  3.map&lt;int,int&gt;::value_type：令元素的类型为map中含有key与val的pair类型<br>  4.map&lt;int,int&gt;::mapped_type：令元素的类型为map中的val类型<br>  5.map&lt;int,int&gt;::key_type：令元素的类型为map中的key类型<br>  所以 我们把nums里的元素分别以key-val的pair形式传到名为a的map容器里</p>
  <figure class="highlight inform7"><table><tr><td class="code"><pre><span class="line">for(int i = 0;i &lt; nums.size();i++)&#123;</span><br><span class="line">        if(a.count(target - nums<span class="comment">[i]</span>) != 0 &amp;&amp; (a<span class="comment">[target - nums<span class="comment">[i]</span>]</span> != i))&#123;</span><br><span class="line">            b<span class="comment">[0]</span> = i;</span><br><span class="line">            b<span class="comment">[1]</span> = a<span class="comment">[target - nums<span class="comment">[i]</span>]</span>;</span><br><span class="line">            break;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return b;</span><br></pre></td></tr></table></figure>
<p>  涉及到的知识：<br>  1.map容器的函数count(key)：如果key键值存在，则返回1，否则返回0<br>  思路：通过target依次减去nums[i]，得到的结果通过count函数搜索是否存在于名为a的map容器中。且通过&amp;&amp;算法来满足“同一个元素在答案里不能重复出现”这一条件。if条件满足后，则赋予名为b的vector容器，最后返回b容器</p>
</li>
</ul>
<h2 id="2-两数相加"><a href="#2-两数相加" class="headerlink" title="2.两数相加"></a>2.两数相加</h2><p>给你两个非空的链表，表示两个非负的整数。它们每位数字都是按照逆序的方式存储的，并且每个节点只能存储一位数字。请你将两个数相加，并以相同形式返回一个表示和的链表。<br>你可以假设除了数字0之外，这两个数都不会以0开头。</p>
<img src="/2022/04/24/record01/example02.jpg" class="" title="这是一张图片">

<p>先贴出答案，然后一步步讲解。</p>
<figure class="highlight ocaml"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * <span class="type">Definition</span> <span class="keyword">for</span> singly-linked <span class="built_in">list</span>.</span><br><span class="line"> * <span class="keyword">struct</span> <span class="type">ListNode</span> &#123;</span><br><span class="line"> *     <span class="built_in">int</span> <span class="keyword">val</span>;</span><br><span class="line"> *     <span class="type">ListNode</span> *next;</span><br><span class="line"> *     <span class="type">ListNode</span><span class="literal">()</span> : <span class="keyword">val</span>(<span class="number">0</span>), next(nullptr) &#123;&#125;</span><br><span class="line"> *     <span class="type">ListNode</span>(<span class="built_in">int</span> x) : <span class="keyword">val</span>(x), next(nullptr) &#123;&#125;</span><br><span class="line"> *     <span class="type">ListNode</span>(<span class="built_in">int</span> x, <span class="type">ListNode</span> *next) : <span class="keyword">val</span>(x), next(next) &#123;&#125;</span><br><span class="line"> * &#125;;</span><br><span class="line"> */</span><br><span class="line"><span class="keyword">class</span> <span class="type">Solution</span> &#123;</span><br><span class="line">public:</span><br><span class="line">    <span class="type">ListNode</span>* addTwoNumbers(<span class="type">ListNode</span>* l1, <span class="type">ListNode</span>* l2) &#123;</span><br><span class="line">        <span class="type">ListNode</span>* <span class="type">H</span> = <span class="keyword">new</span> <span class="type">ListNode</span><span class="literal">()</span>;</span><br><span class="line">        <span class="type">ListNode</span>* ptr = <span class="type">H</span>;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">int</span> carry = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(l1 || l2 || carry)&#123;</span><br><span class="line">            <span class="built_in">int</span> <span class="keyword">val</span> = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span>(l1) <span class="keyword">val</span> += l1-&gt;<span class="keyword">val</span>,l1 = l1-&gt;next;</span><br><span class="line">            <span class="keyword">if</span>(l2) <span class="keyword">val</span> += l2-&gt;<span class="keyword">val</span>,l2 = l2-&gt;next;</span><br><span class="line">            <span class="keyword">val</span> +=carry;</span><br><span class="line"></span><br><span class="line">            <span class="type">ListNode</span>* node = <span class="keyword">new</span> <span class="type">ListNode</span>(<span class="keyword">val</span> % <span class="number">10</span>);</span><br><span class="line">            ptr-&gt;next = node;</span><br><span class="line">            ptr = node;</span><br><span class="line">            carry = <span class="keyword">val</span> / <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        return <span class="type">H</span>-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<ul>
<li>开始逐行分析与知识点回顾<br>  创建链表的详细过程<br>  1.链表的概念<br>  通过一组任意的存储单元来存储线性表中的数据元素，有一个个结点组成。<br>  2.节点(Node)的框架  <figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">struct ListNode&#123;</span><br><span class="line">    int data<span class="comment">;</span></span><br><span class="line">    ListNode* next<span class="comment">;</span></span><br><span class="line">&#125;<span class="comment">;</span></span><br></pre></td></tr></table></figure>
  节点分为头节点和首元节点<br>  a.头节点<br>  设置链表前会额外增设一个节点，该节点一般不存放数据。好处是可以使问题简单化。对于链表来讲，不一定非得增设头节点。<br>  b.首元节点<br>  头节点后边的第一个节点，也是链表中的第一个节点。<br>  节点包括数据data和指针Next<br>  a.指针的概念<br>  指针是一个变量，存储另一个变量的地址<br>  <figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="built_in">int</span>* p;<span class="comment">//定义指针的格式为 数据类型* 指针变量名字</span></span><br><span class="line">p = &amp;a;<span class="comment">//&amp;代表取址符号</span></span><br></pre></td></tr></table></figure><br>  b.结构体指针<br>  <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">student</span>&#123;</span><br><span class="line">    string name;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">&#125;<span class="comment">//创建一个结构体</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="number">1.</span>创建结构体变量</span><br><span class="line">    student s =&#123;<span class="string">&quot;haha&quot;</span>,<span class="number">18</span>&#125;;</span><br><span class="line">    <span class="number">2.</span>通过指针指向结构体变量</span><br><span class="line">    student* p = &amp;s;<span class="comment">//p的类型必须跟s一致</span></span><br><span class="line">    <span class="number">3.</span>指针访问结构体变量中的数据</span><br><span class="line">    cout &lt;&lt; p-&gt;name;<span class="comment">//通过-&gt;访问结构体里的数据</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>  结点的框架图：<img src="/2022/04/24/record01/node_structure.jpg" class="" title="这是一张图片">
  创建链表的流程：  <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="comment">/*创建一个链表*/</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">ListNode</span>&#123;</span><br><span class="line">    <span class="type">int</span> data;</span><br><span class="line">    ListNode* next;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">createList</span><span class="params">(ListNode* pHead)</span></span>&#123;</span><br><span class="line">    ListNode* p = pHead;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; <span class="number">10</span>;i++)&#123;</span><br><span class="line">        ListNode* pNewNode = <span class="keyword">new</span> ListNode;</span><br><span class="line">        pNewNode-&gt;data = i;</span><br><span class="line">        pNewNode-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">        p-&gt;next = pNewNode;</span><br><span class="line">        p = pNewNode;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ListNode* head = <span class="literal">NULL</span>;</span><br><span class="line">    head-&gt;data = <span class="number">0</span>;</span><br><span class="line">    head-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="built_in">createList</span>(head);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
  现来逐个分析   <figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">int main()&#123;</span><br><span class="line">    ListNode* head <span class="operator">=</span> NULL<span class="comment">;</span></span><br><span class="line">    head-&gt;data <span class="operator">=</span> <span class="number">0</span><span class="comment">;</span></span><br><span class="line">    head-&gt;next <span class="operator">=</span> NULL<span class="comment">;</span></span><br><span class="line">    createList(head)<span class="comment">;</span></span><br><span class="line">    return <span class="number">0</span><span class="comment">;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
  首先在main函数创建一个名为head的指针结构体变量，在这我们可以把head看成头节点，分配相应内存和初始化成员后如下图所示  <img src="/2022/04/24/record01/createList01.jpg" class="" title="这是一张图片">
  把head指针代入函数createList，开始创建链表  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">createList</span>(<span class="params">ListNode* pHead</span>)&#123;</span><br><span class="line">    <span class="title class_">ListNode</span>* p = pHead;</span><br></pre></td></tr></table></figure>
  <img src="/2022/04/24/record01/createList02.jpg" class="" title="这是一张图片">
  创造p节点，令结构体指针p等于pHead，此时p的地址与pHead的地址一样，对p操作就是对pHead操作，所以p也是头节点。  <figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">    for(int i <span class="operator">=</span> <span class="number">0</span><span class="comment">;i &lt; 10;i++)&#123;</span></span><br><span class="line">        //i <span class="operator">=</span> <span class="number">0</span></span><br><span class="line">        ListNode* pNewNode <span class="operator">=</span> new ListNode<span class="comment">;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
  进入for循环，处于i&#x3D;0时。在堆区new一个新内存，存放pNewNode。作为中间结构体为存放新节点提供过渡。<br>  a.new的相关知识<br>  new返回的使 该数据类型的指针<br>  <figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span>* <span class="function"><span class="keyword">func</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span>* p = <span class="built_in">new</span> <span class="type">int</span>(<span class="number">10</span>);</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>  b.内存四区<br>  程序运行前：<br>  代码区：存放函数体的二进制代码，由操作系统进行管理<br>  全局区：存放全局变量和静态变量以及常量<br>  程序运行后：<br>  堆区：堆区的数据由程序员开辟，程序员管理使用(delete)<br>  栈区：栈区的数据由系统分配，一般存放函数的参数以及局部变量。函数执行完，栈区的数据都会自动释放。<br>  指针本质是局部变量，放在栈上，但指针保存的数据使放在堆区。<br>  回到链表创建上来  <figure class="highlight xl"><table><tr><td class="code"><pre><span class="line"><span class="comment">//i = 0</span></span><br><span class="line"><span class="function"><span class="title">pNewNode</span>-&gt;</span><span class="keyword">data</span> = i;</span><br><span class="line"><span class="function"><span class="title">pNewNode</span>-&gt;</span>next = NULL;</span><br></pre></td></tr></table></figure>
  <img src="/2022/04/24/record01/createList03.jpg" class="" title="这是一张图片">
  当i&#x3D;0时，在pNewNode里存放数据  <figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">//i <span class="operator">=</span> <span class="number">0</span></span><br><span class="line">p-&gt;next <span class="operator">=</span> pNewNode<span class="comment">;</span></span><br></pre></td></tr></table></figure>
  <img src="/2022/04/24/record01/createList04.jpg" class="" title="这是一张图片">
  头节点p指向我们的创建的链表的第一个节点 i&#x3D;0下的pNewNode，i&#x3D;0下的pNewNode也称之为首元节点。  <figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">//i <span class="operator">=</span> <span class="number">0</span></span><br><span class="line"><span class="attribute">p</span> <span class="operator">=</span> pNewNode<span class="comment">;</span></span><br></pre></td></tr></table></figure>
  <img src="/2022/04/24/record01/createList05.jpg" class="" title="这是一张图片">
  将i&#x3D;1下的pNewNode的地址赋予给p，所以p与pHead没有联系，现在是指针p和i&#x3D;1下的指针pNewNode指向同一块内存。<br>  我们进入下一个循环  <figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">//i <span class="operator">=</span> <span class="number">1</span></span><br><span class="line">ListNode* pNewNode <span class="operator">=</span> new ListNode<span class="comment">;</span></span><br><span class="line">pNewNode-&gt;data <span class="operator">=</span> i<span class="comment">;</span></span><br><span class="line">pNewNode-&gt;next <span class="operator">=</span> NULL<span class="comment">;</span></span><br></pre></td></tr></table></figure>
  <img src="/2022/04/24/record01/createList06.jpg" class="" title="这是一张图片">
  当i&#x3D;1时，在pNewNode里存放数据  <figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">//i <span class="operator">=</span> <span class="number">1</span></span><br><span class="line">p-&gt;next <span class="operator">=</span> pNewNode<span class="comment">;</span></span><br></pre></td></tr></table></figure>
  <img src="/2022/04/24/record01/createList07.jpg" class="" title="这是一张图片">
  节点p指向我们的创建的链表的第一个节点 i&#x3D;1下的pNewNode  <figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">//i <span class="operator">=</span> <span class="number">1</span></span><br><span class="line"><span class="attribute">p</span> <span class="operator">=</span> pNewNode<span class="comment">;</span></span><br></pre></td></tr></table></figure>
  <img src="/2022/04/24/record01/createList08.jpg" class="" title="这是一张图片">
  将i&#x3D;1下的pNewNode的地址赋予给p，所以p与i&#x3D;0下的pNewNode没有联系，现在是指针p和i&#x3D;1下的指针pNewNode指向同一块内存。<br>  我们的创建链表的详细过程就结束了，回到LeetCode题上。</li>
</ul>
<figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">ListNode* H <span class="operator">=</span> new ListNode()<span class="comment">;</span></span><br><span class="line">ListNode* ptr <span class="operator">=</span> H<span class="comment">;</span></span><br><span class="line">int carry <span class="operator">=</span> <span class="number">0</span><span class="comment">;</span></span><br></pre></td></tr></table></figure>
<p>H为定义的头节点，ptr是中间节点，H存放的地址与ptr存放的地址一致。carry为进位数</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">while</span><span class="params">(l1 || l2 || carry)</span></span>&#123;</span><br></pre></td></tr></table></figure>
<p>个人的看法只要当l1 l2的val为0(结构体里的data)及carry为0，才返回false，其他情况一律为true。</p>
<figure class="highlight ocaml"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(l1) <span class="keyword">val</span> += l1-&gt;<span class="keyword">val</span>,l1 = l1-&gt;next;</span><br><span class="line"><span class="keyword">if</span>(l2) <span class="keyword">val</span> += l2-&gt;<span class="keyword">val</span>,l2 = l2-&gt;next;</span><br><span class="line"><span class="keyword">val</span> +=carry;</span><br></pre></td></tr></table></figure>
<p>当l1不为0是 执行if语句 val为l1链表的第一个数字，l1从第一个链表转换成l1的第二个链表<br>第二行代码同理<br>carry是进位制</p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line">ListNode* <span class="keyword">node</span> <span class="title">= new</span> ListNode(val % <span class="number">10</span>);</span><br></pre></td></tr></table></figure>
<p>创建新链表的第一个节点，存储的数据为 val除以10的余数</p>
<figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">ptr-&gt;next <span class="operator">=</span> node<span class="comment">;</span></span><br><span class="line"><span class="attribute">ptr</span> <span class="operator">=</span> node<span class="comment">;</span></span><br><span class="line"><span class="attribute">carry</span> <span class="operator">=</span> val / <span class="number">10</span><span class="comment">;</span></span><br></pre></td></tr></table></figure>
<p>因为node存放的数据是我们想要的数据，所以利用ptr的next指针即H的next指针指向node节点，ptr切断与H的联系，令ptr与node指向同一块内存，手法跟创建链表一样。通过相除判断carry是否进1位。</p>
<figure class="highlight autoit"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> H-&gt;<span class="keyword">next</span><span class="comment">;</span></span><br></pre></td></tr></table></figure>
<p>H为头节点，头节点下一个next才是链表中的节点。</p>
<h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p>第一次写博客，刚开始上手不是很熟悉，所以暂时就写了这周学的LeetCode。下次尝试把参与的项目学到的知识分享在博客中。暂定每周日更新博客，如果有研究僧考试那就咕咕咕~See you next week</p>
]]></content>
      <categories>
        <category>嵌入式</category>
        <category>c++</category>
      </categories>
      <tags>
        <tag>每周学习</tag>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>Second learning record in April</title>
    <url>/2022/05/02/record02/</url>
    <content><![CDATA[<p>分享四月第一周学习内容</p>
<h1 id="leetcode-热题HOT-100"><a href="#leetcode-热题HOT-100" class="headerlink" title="leetcode 热题HOT 100"></a>leetcode 热题HOT 100</h1><h2 id="3-无重复字符的最长子串"><a href="#3-无重复字符的最长子串" class="headerlink" title="3. 无重复字符的最长子串"></a>3. 无重复字符的最长子串</h2><p>给定一个字符串s，请你找出其中不含有重复字符的最长子串的长度。</p>
<img src="/2022/05/02/record02/example01.jpg" class="" title="这是一张图片">
<p>先贴出答案，然后一步步讲解。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = s.<span class="built_in">length</span>();</span><br><span class="line">        <span class="type">int</span> ret = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> l = <span class="number">0</span>;</span><br><span class="line">        unordered_map&lt;<span class="type">char</span>,<span class="type">int</span>&gt; Mirror;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; n;i++)&#123;</span><br><span class="line">            Mirror[s[i]]++;</span><br><span class="line">            <span class="keyword">while</span>(Mirror[s[i]] &gt;= <span class="number">2</span>)&#123;</span><br><span class="line">                Mirror[s[l++]]--;</span><br><span class="line">            &#125;</span><br><span class="line">            ret = <span class="built_in">max</span>(ret,i - l +<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="4-寻找两个正序数组的中位数"><a href="#4-寻找两个正序数组的中位数" class="headerlink" title="4. 寻找两个正序数组的中位数"></a>4. 寻找两个正序数组的中位数</h2><p>给定两个大小分别为m和n的正序（从小到大）数组nums1和nums2。请你找出并返回这两个正序数组的中位数。</p>
<img src="/2022/05/02/record02/example02.jpg" class="" title="这是一张图片">
<p>先贴出答案，然后一步步讲解。</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    <span class="built_in">int</span> find<span class="constructor">Kth(<span class="params">const</span> <span class="params">vector</span>&lt;<span class="params">int</span>&gt;&amp; <span class="params">a</span>,<span class="params">int</span> <span class="params">sta</span>,<span class="params">const</span> <span class="params">vector</span>&lt;<span class="params">int</span>&gt;&amp; <span class="params">b</span>,<span class="params">int</span> <span class="params">stb</span>,<span class="params">int</span> <span class="params">kth</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(sta &gt;= a.size<span class="literal">()</span>) return b<span class="literal">[<span class="identifier">kth</span> - <span class="number">1</span> + <span class="identifier">stb</span>]</span>;</span><br><span class="line">        <span class="keyword">if</span>(stb &gt;= b.size<span class="literal">()</span>) return a<span class="literal">[<span class="identifier">kth</span> - <span class="number">1</span> + <span class="identifier">sta</span>]</span>;</span><br><span class="line">        <span class="keyword">if</span>(kth<span class="operator"> == </span><span class="number">1</span>) return min(a<span class="literal">[<span class="identifier">sta</span>]</span> , b<span class="literal">[<span class="identifier">stb</span>]</span>);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">int</span> h = kth<span class="operator"> / </span><span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">int</span> vala = a.size<span class="literal">()</span> - sta &gt;= h ? a<span class="literal">[<span class="identifier">sta</span> + <span class="identifier">h</span> - <span class="number">1</span>]</span> : a.back<span class="literal">()</span>;</span><br><span class="line">        <span class="built_in">int</span> h_a = a.size<span class="literal">()</span> - sta &gt;= h ? h : a.size<span class="literal">()</span> - sta;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">int</span> valb = b.size<span class="literal">()</span> - stb &gt;= h ? b<span class="literal">[<span class="identifier">stb</span> + <span class="identifier">h</span> - <span class="number">1</span>]</span> : b.back<span class="literal">()</span>;</span><br><span class="line">        <span class="built_in">int</span> h_b = b.size<span class="literal">()</span> - stb &gt;= h ? h : b.size<span class="literal">()</span> - stb;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(vala &gt;= valb)&#123;</span><br><span class="line">            return find<span class="constructor">Kth(<span class="params">a</span>,<span class="params">sta</span>,<span class="params">b</span>,<span class="params">stb</span> + <span class="params">h_b</span>,<span class="params">kth</span> - <span class="params">h_b</span>)</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            return find<span class="constructor">Kth(<span class="params">a</span>,<span class="params">sta</span> + <span class="params">h_a</span>,<span class="params">b</span>,<span class="params">stb</span>,<span class="params">kth</span> - <span class="params">h_a</span>)</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    double find<span class="constructor">MedianSortedArrays(<span class="params">vector</span>&lt;<span class="params">int</span>&gt;&amp; <span class="params">a</span>, <span class="params">vector</span>&lt;<span class="params">int</span>&gt;&amp; <span class="params">b</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">int</span> n = a.size<span class="literal">()</span>;</span><br><span class="line">        <span class="built_in">int</span> m = b.size<span class="literal">()</span>;</span><br><span class="line">        <span class="built_in">int</span> k = n + m;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">int</span> k1 = (k + <span class="number">1</span>)<span class="operator"> / </span><span class="number">2</span>;</span><br><span class="line">        <span class="built_in">int</span> k2 = (k + <span class="number">2</span>)<span class="operator"> / </span><span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">int</span> ava_1 = find<span class="constructor">Kth(<span class="params">a</span>,0,<span class="params">b</span>,0,<span class="params">k1</span>)</span>;</span><br><span class="line">        <span class="built_in">int</span> ava_2 = find<span class="constructor">Kth(<span class="params">a</span>,0,<span class="params">b</span>,0,<span class="params">k2</span>)</span>;</span><br><span class="line"></span><br><span class="line">        return <span class="number">1.</span>*(ava_1 + ava_2)<span class="operator"> / </span><span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="5-最长回文子串"><a href="#5-最长回文子串" class="headerlink" title="5. 最长回文子串"></a>5. 最长回文子串</h2><p>给你一个字符串s，找到s中最长的回文子串。</p>
<img src="/2022/05/02/record02/example03.jpg" class="" title="这是一张图片">
<p>先贴出答案，然后一步步讲解。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    <span class="type">string</span> longestPalindrome(<span class="type">string</span> s) &#123;</span><br><span class="line">        <span class="type">int</span> m = s.length();</span><br><span class="line">        vector&lt;vector&lt;<span class="type">bool</span>&gt;&gt; f(m , vector&lt;<span class="type">bool</span>&gt;(m , <span class="literal">false</span>));</span><br><span class="line">        <span class="type">int</span> p_left = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> maxlen = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; m;i++)&#123;</span><br><span class="line">            f[i][i] = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="built_in">len</span> = <span class="number">2</span>;<span class="built_in">len</span> &lt;= m;<span class="built_in">len</span>++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i + <span class="built_in">len</span> &lt;= m;i++)&#123;</span><br><span class="line">                <span class="type">int</span> j = i + <span class="built_in">len</span> - <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span>(s[i] != s[j]) <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">if</span>(<span class="built_in">len</span> &gt; <span class="number">2</span> &amp;&amp; f[i+<span class="number">1</span>][j<span class="number">-1</span>] == <span class="literal">false</span>) <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">                f[i][j] = <span class="literal">true</span>;</span><br><span class="line">                p_left = i;</span><br><span class="line">                maxlen =<span class="built_in">len</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> s.substr(p_left,maxlen);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h1 id="动态规划的入门学习"><a href="#动态规划的入门学习" class="headerlink" title="动态规划的入门学习"></a>动态规划的入门学习</h1><h2 id="509-斐波那契数"><a href="#509-斐波那契数" class="headerlink" title="509. 斐波那契数"></a>509. 斐波那契数</h2><p>斐波那契数（通常用 F(n)表示）形成的序列称为斐波那契数列。该数列由0和1开始，后面的每一项数字都是前面两项数字的和。</p>
<img src="/2022/05/02/record02/example04.jpg" class="" title="这是一张图片">
<p>先贴出答案，然后一步步讲解。</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="symbol">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">int</span> fib(<span class="built_in">int</span> N) &#123;</span><br><span class="line">        <span class="built_in">int</span> dp[<span class="number">31</span>];</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        dp[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">2</span>; i &lt;= N; i++) &#123;</span><br><span class="line">            dp[i] = dp[i - <span class="number">1</span>] + dp[i - <span class="number">2</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[N];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="70-爬楼梯"><a href="#70-爬楼梯" class="headerlink" title="70. 爬楼梯"></a>70. 爬楼梯</h2><p>假设你正在爬楼梯。需要 n 阶你才能到达楼顶。每次你可以爬1或2个台阶。你有多少种不同的方法可以爬到楼顶呢？</p>
<img src="/2022/05/02/record02/example05.jpg" class="" title="这是一张图片">
<p>先贴出答案，然后一步步讲解。</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="symbol">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">int</span> climbStairs(<span class="built_in">int</span> n) &#123;</span><br><span class="line">        <span class="built_in">int</span> dp[<span class="number">46</span>];</span><br><span class="line">        dp[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">        dp[<span class="number">2</span>] = <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="built_in">int</span> i = <span class="number">3</span>;i &lt;= n;i++)&#123;</span><br><span class="line">            dp[i] = dp[i - <span class="number">1</span>] + dp[i - <span class="number">2</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="746-使用最小花费爬楼梯"><a href="#746-使用最小花费爬楼梯" class="headerlink" title="746. 使用最小花费爬楼梯"></a>746. 使用最小花费爬楼梯</h2><p>给你一个整数数组cost，其中cost[i]是从楼梯第i个台阶向上爬需要支付的费用。一旦你支付此费用，即可选择向上爬一个或者两个台阶。你可以选择从下标为0或下标为1的台阶开始爬楼梯。请你计算并返回达到楼梯顶部的最低花费。</p>
<img src="/2022/05/02/record02/example06.jpg" class="" title="这是一张图片">
<p>先贴出答案，然后一步步讲解。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minCostClimbingStairs</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; cost)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> m = cost.<span class="built_in">size</span>();</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dp</span><span class="params">( m + <span class="number">1</span>, <span class="number">0</span> )</span></span>;</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        dp[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>;i &lt;= m;i++)&#123;</span><br><span class="line">            dp[i] = <span class="built_in">min</span>(dp[i<span class="number">-1</span>]+cost[i<span class="number">-1</span>],dp[i<span class="number">-2</span>]+cost[i<span class="number">-2</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[m];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>


<h1 id="参与项目：-七轴机械臂的正解逆解学习"><a href="#参与项目：-七轴机械臂的正解逆解学习" class="headerlink" title="参与项目： 七轴机械臂的正解逆解学习"></a>参与项目： 七轴机械臂的正解逆解学习</h1>]]></content>
      <categories>
        <category>嵌入式</category>
        <category>c++</category>
      </categories>
      <tags>
        <tag>每周学习</tag>
        <tag>leetcode</tag>
      </tags>
  </entry>
</search>

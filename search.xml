<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2022/04/17/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<span id="more"></span>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>First learning record</title>
    <url>/2022/04/24/record01/</url>
    <content><![CDATA[<p>分享第一周学习内容</p>
<span id="more"></span>
<h1 id="leetcode-热题HOT-100"><a href="#leetcode-热题HOT-100" class="headerlink" title="leetcode 热题HOT 100"></a>leetcode 热题HOT 100</h1><h2 id="1-两数相加"><a href="#1-两数相加" class="headerlink" title="1.两数相加"></a>1.两数相加</h2><p>给定一个整数数组nums和一个整数目标值target请你在该数组中找出和为目标值target的那 两个整数，并返回它们的数组下标。你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。你可以按任意顺序返回答案。</p>
<img src="/2022/04/24/record01/example01.jpg" class="" title="这是一张图片">

<p>先贴出答案，然后一步步讲解。</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">twoSum</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">        map&lt;<span class="type">int</span>,<span class="type">int</span>&gt; a; </span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">b</span><span class="params">(<span class="number">2</span>,<span class="number">-1</span>)</span></span>; </span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; nums.<span class="built_in">size</span>();i++)</span><br><span class="line">            a.<span class="built_in">insert</span>(map&lt;<span class="type">int</span>,<span class="type">int</span>&gt;::<span class="built_in">value_type</span>(nums[i],i));</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; nums.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(a.<span class="built_in">count</span>(target - nums[i]) != <span class="number">0</span> &amp;&amp; (a[target - nums[i]] != i))&#123;</span><br><span class="line">                b[<span class="number">0</span>] = i;</span><br><span class="line">                b[<span class="number">1</span>] = a[target - nums[i]];</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>通常的作法为逐步尝试，首先第一个加第二个，再第一个加第三个……思路虽然简单暴力但运行速度慢且内存空间消耗大<br>此代码采用的</p>
<ul>
<li><p>开始逐行分析与知识点回顾</p>
  <figure class="highlight perl"><table><tr><td class="code"><pre><span class="line"><span class="keyword">map</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; a; <span class="regexp">//</span>创建名为a的<span class="keyword">map</span>容器，key与val的类型均为<span class="keyword">int</span></span><br></pre></td></tr></table></figure>

<p>  回顾map容器的相关知识：<br>  1.map容器里的数值都是pair—&gt;成对出现 分别为键值key与实值val<br>  2.我们可以通过key的索引查到对应的val<br>  3.map不允许有重复的键值key存在<br>  3.所有元素都会根据你所存的键值key进行自动排序<br>  4.其中&lt;int,int&gt;  左边int代表key的类型为int  右边的int代表val为int</p>
<p>  作用为：存储nums里的元素</p>
  <figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">vector</span>&lt;int&gt; b(<span class="number">2</span>,-<span class="number">1</span>);//创建名为b的vector容器，<span class="number">2</span>代表初始长度，里面的值均为-<span class="number">1</span>，存储nums里能满足target的两个值</span><br></pre></td></tr></table></figure>

<p>  回顾vector容器的相关知识：<br>  1.与数组结构非常相似，与数组不同点在于数组是静态，而vector是动态扩展</p>
  <figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="built_in">int</span> i = <span class="number">0</span>;i &lt; nums.size<span class="literal">()</span>;i++)</span><br><span class="line">    a.insert(map&lt;<span class="built_in">int</span>,<span class="built_in">int</span>&gt;::value<span class="constructor">_type(<span class="params">nums</span>[<span class="params">i</span>],<span class="params">i</span>)</span>);</span><br></pre></td></tr></table></figure>
<p>  涉及到的知识：<br>  1.nums.size()表示的是整数数组nums的长度<br>  2.a.insert是调用map容器里的函数insert：在map中插入元素<br>  3.map&lt;int,int&gt;::value_type：令元素的类型为map中含有key与val的pair类型<br>  4.map&lt;int,int&gt;::mapped_type：令元素的类型为map中的val类型<br>  5.map&lt;int,int&gt;::key_type：令元素的类型为map中的key类型<br>  所以 我们把nums里的元素分别以key-val的pair形式传到名为a的map容器里</p>
  <figure class="highlight inform7"><table><tr><td class="code"><pre><span class="line">for(int i = 0;i &lt; nums.size();i++)&#123;</span><br><span class="line">        if(a.count(target - nums<span class="comment">[i]</span>) != 0 &amp;&amp; (a<span class="comment">[target - nums<span class="comment">[i]</span>]</span> != i))&#123;</span><br><span class="line">            b<span class="comment">[0]</span> = i;</span><br><span class="line">            b<span class="comment">[1]</span> = a<span class="comment">[target - nums<span class="comment">[i]</span>]</span>;</span><br><span class="line">            break;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return b;</span><br></pre></td></tr></table></figure>
<p>  涉及到的知识：<br>  1.map容器的函数count(key)：如果key键值存在，则返回1，否则返回0<br>  思路：通过target依次减去nums[i]，得到的结果通过count函数搜索是否存在于名为a的map容器中。且通过&amp;&amp;算法来满足“同一个元素在答案里不能重复出现”这一条件。if条件满足后，则赋予名为b的vector容器，最后返回b容器</p>
</li>
</ul>
<h2 id="2-两数相加"><a href="#2-两数相加" class="headerlink" title="2.两数相加"></a>2.两数相加</h2><p>给你两个非空的链表，表示两个非负的整数。它们每位数字都是按照逆序的方式存储的，并且每个节点只能存储一位数字。请你将两个数相加，并以相同形式返回一个表示和的链表。<br>你可以假设除了数字0之外，这两个数都不会以0开头。</p>
<img src="/2022/04/24/record01/example02.jpg" class="" title="这是一张图片">

<p>先贴出答案，然后一步步讲解。</p>
<figure class="highlight ocaml"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * <span class="type">Definition</span> <span class="keyword">for</span> singly-linked <span class="built_in">list</span>.</span><br><span class="line"> * <span class="keyword">struct</span> <span class="type">ListNode</span> &#123;</span><br><span class="line"> *     <span class="built_in">int</span> <span class="keyword">val</span>;</span><br><span class="line"> *     <span class="type">ListNode</span> *next;</span><br><span class="line"> *     <span class="type">ListNode</span><span class="literal">()</span> : <span class="keyword">val</span>(<span class="number">0</span>), next(nullptr) &#123;&#125;</span><br><span class="line"> *     <span class="type">ListNode</span>(<span class="built_in">int</span> x) : <span class="keyword">val</span>(x), next(nullptr) &#123;&#125;</span><br><span class="line"> *     <span class="type">ListNode</span>(<span class="built_in">int</span> x, <span class="type">ListNode</span> *next) : <span class="keyword">val</span>(x), next(next) &#123;&#125;</span><br><span class="line"> * &#125;;</span><br><span class="line"> */</span><br><span class="line"><span class="keyword">class</span> <span class="type">Solution</span> &#123;</span><br><span class="line">public:</span><br><span class="line">    <span class="type">ListNode</span>* addTwoNumbers(<span class="type">ListNode</span>* l1, <span class="type">ListNode</span>* l2) &#123;</span><br><span class="line">        <span class="type">ListNode</span>* <span class="type">H</span> = <span class="keyword">new</span> <span class="type">ListNode</span><span class="literal">()</span>;</span><br><span class="line">        <span class="type">ListNode</span>* ptr = <span class="type">H</span>;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">int</span> carry = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(l1 || l2 || carry)&#123;</span><br><span class="line">            <span class="built_in">int</span> <span class="keyword">val</span> = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span>(l1) <span class="keyword">val</span> += l1-&gt;<span class="keyword">val</span>,l1 = l1-&gt;next;</span><br><span class="line">            <span class="keyword">if</span>(l2) <span class="keyword">val</span> += l2-&gt;<span class="keyword">val</span>,l2 = l2-&gt;next;</span><br><span class="line">            <span class="keyword">val</span> +=carry;</span><br><span class="line"></span><br><span class="line">            <span class="type">ListNode</span>* node = <span class="keyword">new</span> <span class="type">ListNode</span>(<span class="keyword">val</span> % <span class="number">10</span>);</span><br><span class="line">            ptr-&gt;next = node;</span><br><span class="line">            ptr = node;</span><br><span class="line">            carry = <span class="keyword">val</span> / <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        return <span class="type">H</span>-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<ul>
<li>开始逐行分析与知识点回顾<br>  创建链表的详细过程<br>  1.链表的概念<br>  通过一组任意的存储单元来存储线性表中的数据元素，有一个个结点组成。<br>  2.节点(Node)的框架  <figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">struct ListNode&#123;</span><br><span class="line">    int data<span class="comment">;</span></span><br><span class="line">    ListNode* next<span class="comment">;</span></span><br><span class="line">&#125;<span class="comment">;</span></span><br></pre></td></tr></table></figure>
  节点分为头节点和首元节点<br>  a.头节点<br>  设置链表前会额外增设一个节点，该节点一般不存放数据。好处是可以使问题简单化。对于链表来讲，不一定非得增设头节点。<br>  b.首元节点<br>  头节点后边的第一个节点，也是链表中的第一个节点。<br>  节点包括数据data和指针Next<br>  a.指针的概念<br>  指针是一个变量，存储另一个变量的地址<br>  <figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="built_in">int</span>* p;<span class="comment">//定义指针的格式为 数据类型* 指针变量名字</span></span><br><span class="line">p = &amp;a;<span class="comment">//&amp;代表取址符号</span></span><br></pre></td></tr></table></figure><br>  b.结构体指针<br>  <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">student</span>&#123;</span><br><span class="line">    string name;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">&#125;<span class="comment">//创建一个结构体</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="number">1.</span>创建结构体变量</span><br><span class="line">    student s =&#123;<span class="string">&quot;haha&quot;</span>,<span class="number">18</span>&#125;;</span><br><span class="line">    <span class="number">2.</span>通过指针指向结构体变量</span><br><span class="line">    student* p = &amp;s;<span class="comment">//p的类型必须跟s一致</span></span><br><span class="line">    <span class="number">3.</span>指针访问结构体变量中的数据</span><br><span class="line">    cout &lt;&lt; p-&gt;name;<span class="comment">//通过-&gt;访问结构体里的数据</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>  结点的框架图：<img src="/2022/04/24/record01/node_structure.jpg" class="" title="这是一张图片">
  创建链表的流程：  <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="comment">/*创建一个链表*/</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">ListNode</span>&#123;</span><br><span class="line">    <span class="type">int</span> data;</span><br><span class="line">    ListNode* next;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">createList</span><span class="params">(ListNode* pHead)</span></span>&#123;</span><br><span class="line">    ListNode* p = pHead;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; <span class="number">10</span>;i++)&#123;</span><br><span class="line">        ListNode* pNewNode = <span class="keyword">new</span> ListNode;</span><br><span class="line">        pNewNode-&gt;data = i;</span><br><span class="line">        pNewNode-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">        p-&gt;next = pNewNode;</span><br><span class="line">        p = pNewNode;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ListNode* head = <span class="literal">NULL</span>;</span><br><span class="line">    head-&gt;data = <span class="number">0</span>;</span><br><span class="line">    head-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="built_in">createList</span>(head);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
  现来逐个分析   <figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">int main()&#123;</span><br><span class="line">    ListNode* head <span class="operator">=</span> NULL<span class="comment">;</span></span><br><span class="line">    head-&gt;data <span class="operator">=</span> <span class="number">0</span><span class="comment">;</span></span><br><span class="line">    head-&gt;next <span class="operator">=</span> NULL<span class="comment">;</span></span><br><span class="line">    createList(head)<span class="comment">;</span></span><br><span class="line">    return <span class="number">0</span><span class="comment">;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
  首先在main函数创建一个名为head的指针结构体变量，在这我们可以把head看成头节点，分配相应内存和初始化成员后如下图所示  <img src="/2022/04/24/record01/createList01.jpg" class="" title="这是一张图片">
  把head指针代入函数createList，开始创建链表  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">createList</span>(<span class="params">ListNode* pHead</span>)&#123;</span><br><span class="line">    <span class="title class_">ListNode</span>* p = pHead;</span><br></pre></td></tr></table></figure>
  <img src="/2022/04/24/record01/createList02.jpg" class="" title="这是一张图片">
  创造p节点，令结构体指针p等于pHead，此时p的地址与pHead的地址一样，对p操作就是对pHead操作，所以p也是头节点。  <figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">    for(int i <span class="operator">=</span> <span class="number">0</span><span class="comment">;i &lt; 10;i++)&#123;</span></span><br><span class="line">        //i <span class="operator">=</span> <span class="number">0</span></span><br><span class="line">        ListNode* pNewNode <span class="operator">=</span> new ListNode<span class="comment">;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
  进入for循环，处于i&#x3D;0时。在堆区new一个新内存，存放pNewNode。作为中间结构体为存放新节点提供过渡。<br>  a.new的相关知识<br>  new返回的使 该数据类型的指针<br>  <figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span>* <span class="function"><span class="keyword">func</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span>* p = <span class="built_in">new</span> <span class="type">int</span>(<span class="number">10</span>);</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>  b.内存四区<br>  程序运行前：<br>  代码区：存放函数体的二进制代码，由操作系统进行管理<br>  全局区：存放全局变量和静态变量以及常量<br>  程序运行后：<br>  堆区：堆区的数据由程序员开辟，程序员管理使用(delete)<br>  栈区：栈区的数据由系统分配，一般存放函数的参数以及局部变量。函数执行完，栈区的数据都会自动释放。<br>  指针本质是局部变量，放在栈上，但指针保存的数据使放在堆区。<br>  回到链表创建上来  <figure class="highlight xl"><table><tr><td class="code"><pre><span class="line"><span class="comment">//i = 0</span></span><br><span class="line"><span class="function"><span class="title">pNewNode</span>-&gt;</span><span class="keyword">data</span> = i;</span><br><span class="line"><span class="function"><span class="title">pNewNode</span>-&gt;</span>next = NULL;</span><br></pre></td></tr></table></figure>
  <img src="/2022/04/24/record01/createList03.jpg" class="" title="这是一张图片">
  当i&#x3D;0时，在pNewNode里存放数据  <figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">//i <span class="operator">=</span> <span class="number">0</span></span><br><span class="line">p-&gt;next <span class="operator">=</span> pNewNode<span class="comment">;</span></span><br></pre></td></tr></table></figure>
  <img src="/2022/04/24/record01/createList04.jpg" class="" title="这是一张图片">
  头节点p指向我们的创建的链表的第一个节点 i&#x3D;0下的pNewNode，i&#x3D;0下的pNewNode也称之为首元节点。  <figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">//i <span class="operator">=</span> <span class="number">0</span></span><br><span class="line"><span class="attribute">p</span> <span class="operator">=</span> pNewNode<span class="comment">;</span></span><br></pre></td></tr></table></figure>
  <img src="/2022/04/24/record01/createList05.jpg" class="" title="这是一张图片">
  将i&#x3D;1下的pNewNode的地址赋予给p，所以p与pHead没有联系，现在是指针p和i&#x3D;1下的指针pNewNode指向同一块内存。<br>  我们进入下一个循环  <figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">//i <span class="operator">=</span> <span class="number">1</span></span><br><span class="line">ListNode* pNewNode <span class="operator">=</span> new ListNode<span class="comment">;</span></span><br><span class="line">pNewNode-&gt;data <span class="operator">=</span> i<span class="comment">;</span></span><br><span class="line">pNewNode-&gt;next <span class="operator">=</span> NULL<span class="comment">;</span></span><br></pre></td></tr></table></figure>
  <img src="/2022/04/24/record01/createList06.jpg" class="" title="这是一张图片">
  当i&#x3D;1时，在pNewNode里存放数据  <figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">//i <span class="operator">=</span> <span class="number">1</span></span><br><span class="line">p-&gt;next <span class="operator">=</span> pNewNode<span class="comment">;</span></span><br></pre></td></tr></table></figure>
  <img src="/2022/04/24/record01/createList07.jpg" class="" title="这是一张图片">
  节点p指向我们的创建的链表的第一个节点 i&#x3D;1下的pNewNode  <figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">//i <span class="operator">=</span> <span class="number">1</span></span><br><span class="line"><span class="attribute">p</span> <span class="operator">=</span> pNewNode<span class="comment">;</span></span><br></pre></td></tr></table></figure>
  <img src="/2022/04/24/record01/createList08.jpg" class="" title="这是一张图片">
  将i&#x3D;1下的pNewNode的地址赋予给p，所以p与i&#x3D;0下的pNewNode没有联系，现在是指针p和i&#x3D;1下的指针pNewNode指向同一块内存。<br>  我们的创建链表的详细过程就结束了，回到LeetCode题上。</li>
</ul>
<figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">ListNode* H <span class="operator">=</span> new ListNode()<span class="comment">;</span></span><br><span class="line">ListNode* ptr <span class="operator">=</span> H<span class="comment">;</span></span><br><span class="line">int carry <span class="operator">=</span> <span class="number">0</span><span class="comment">;</span></span><br></pre></td></tr></table></figure>
<p>H为定义的头节点，ptr是中间节点，H存放的地址与ptr存放的地址一致。carry为进位数</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">while</span><span class="params">(l1 || l2 || carry)</span></span>&#123;</span><br></pre></td></tr></table></figure>
<p>个人的看法只要当l1 l2的val为0(结构体里的data)及carry为0，才返回false，其他情况一律为true。</p>
<figure class="highlight ocaml"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(l1) <span class="keyword">val</span> += l1-&gt;<span class="keyword">val</span>,l1 = l1-&gt;next;</span><br><span class="line"><span class="keyword">if</span>(l2) <span class="keyword">val</span> += l2-&gt;<span class="keyword">val</span>,l2 = l2-&gt;next;</span><br><span class="line"><span class="keyword">val</span> +=carry;</span><br></pre></td></tr></table></figure>
<p>当l1不为0是 执行if语句 val为l1链表的第一个数字，l1从第一个链表转换成l1的第二个链表<br>第二行代码同理<br>carry是进位制</p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line">ListNode* <span class="keyword">node</span> <span class="title">= new</span> ListNode(val % <span class="number">10</span>);</span><br></pre></td></tr></table></figure>
<p>创建新链表的第一个节点，存储的数据为 val除以10的余数</p>
<figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">ptr-&gt;next <span class="operator">=</span> node<span class="comment">;</span></span><br><span class="line"><span class="attribute">ptr</span> <span class="operator">=</span> node<span class="comment">;</span></span><br><span class="line"><span class="attribute">carry</span> <span class="operator">=</span> val / <span class="number">10</span><span class="comment">;</span></span><br></pre></td></tr></table></figure>
<p>因为node存放的数据是我们想要的数据，所以利用ptr的next指针即H的next指针指向node节点，ptr切断与H的联系，令ptr与node指向同一块内存，手法跟创建链表一样。通过相除判断carry是否进1位。</p>
<figure class="highlight autoit"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> H-&gt;<span class="keyword">next</span><span class="comment">;</span></span><br></pre></td></tr></table></figure>
<p>H为头节点，头节点下一个next才是链表中的节点。</p>
<h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p>第一次写博客，刚开始上手不是很熟悉，所以暂时就写了这周学的LeetCode。下次尝试把参与的项目学到的知识分享在博客中。暂定每周日更新博客，如果有研究僧考试那就咕咕咕~See you next week</p>
]]></content>
      <categories>
        <category>嵌入式</category>
        <category>c++</category>
      </categories>
      <tags>
        <tag>每周学习</tag>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>Second learning record in April</title>
    <url>/2022/05/01/record02/</url>
    <content><![CDATA[<p>分享四月第二周学习内容</p>
<span id="more"></span>
<h1 id="leetcode-热题HOT-100"><a href="#leetcode-热题HOT-100" class="headerlink" title="leetcode 热题HOT 100"></a>leetcode 热题HOT 100</h1><h2 id="3-无重复字符的最长子串"><a href="#3-无重复字符的最长子串" class="headerlink" title="3. 无重复字符的最长子串"></a>3. 无重复字符的最长子串</h2><p>给定一个字符串s，请你找出其中不含有重复字符的最长子串的长度。</p>
<img src="/2022/05/01/record02/example01.jpg" class="" title="这是一张图片">
<p>先贴出答案，然后一步步讲解。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = s.<span class="built_in">length</span>();</span><br><span class="line">        <span class="type">int</span> ret = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> l = <span class="number">0</span>;</span><br><span class="line">        unordered_map&lt;<span class="type">char</span>,<span class="type">int</span>&gt; Mirror;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; n;i++)&#123;</span><br><span class="line">            Mirror[s[i]]++;</span><br><span class="line">            <span class="keyword">while</span>(Mirror[s[i]] &gt;= <span class="number">2</span>)&#123;</span><br><span class="line">                Mirror[s[l++]]--;</span><br><span class="line">            &#125;</span><br><span class="line">            ret = <span class="built_in">max</span>(ret,i - l +<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>本题的思路为：定义两个索引箭头指向字符串的两端，左端点的箭头先固定不动，右端点箭头右移进行索引，如果碰到重复字符，记录此时的长度，同时左端点往右移，直到没有重复字符为止。右端指针继续右移操作。重复上述过程</p>
<ul>
<li><p>开始逐行分析与知识点回顾</p>
  <figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">int n <span class="operator">=</span> s.length()<span class="comment">;</span></span><br><span class="line">int ret <span class="operator">=</span> <span class="number">0</span><span class="comment">;</span></span><br><span class="line">int l <span class="operator">=</span> <span class="number">0</span><span class="comment">;</span></span><br></pre></td></tr></table></figure>
<p>  n为字符串长度，ret代表我们想返回的值，也就是最长子串的长度。l代表左端点指针</p>
  <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">unordered_map&lt;<span class="type">char</span>,<span class="type">int</span>&gt; Mirror;</span><br></pre></td></tr></table></figure>
<p>  定义一个名为Mirror的map容器，键值类型为char，用来存放单个字符。实值类型为int，用来存放字符在字符串的个数<br>  特点是：<br>  1.键只能有一个，但实值能有许多个<br>  2.无序排列<br>  3.通过 容器名[] 能直接添加键值</p>
  <figure class="highlight inform7"><table><tr><td class="code"><pre><span class="line">for(int i = 0;i &lt; n;i++)&#123;</span><br><span class="line">        Mirror<span class="comment">[s<span class="comment">[i]</span>]</span>++;</span><br><span class="line">        while(Mirror<span class="comment">[s<span class="comment">[i]</span>]</span> &gt;= 2)&#123;</span><br><span class="line">            Mirror<span class="comment">[s<span class="comment">[l++]</span>]</span>--;</span><br><span class="line">        &#125;</span><br><span class="line">        ret = max(ret,i - l +1);</span><br><span class="line">    &#125;</span><br><span class="line">    return ret;</span><br></pre></td></tr></table></figure>
<p>  i代表右端点索引箭头，i++代表右端点箭头右移<br>  Mirror[s[i]]++; 表示的是右端点指向字符存进map容器中，相应的实值从默认的0增加1个单位。<br>  while(Mirror[s[i]] &gt;&#x3D; 2){    当存放的数量大于1时候 我们就需要将左端点右移<br>  Mirror[s[l++]]–;     l++代表左端点右移。要注意l先执行之前的数字，执行完后才进行自身的加1操作。与++l要区分开。 左端点指针右移的同时(也就是l++)，map容器里存放的相应的字符数量-1。因为右端点索引箭头指向重复字符时，左端点右移要移动到“重复字符的右边一个单位”，这样才能使两端点内的字符不会有重复的字符，移动的同时会“损失一部分字符” ，所以要-1。<br>  ret记录最长长度，循环结束后返回。</p>
</li>
</ul>
<h2 id="4-寻找两个正序数组的中位数"><a href="#4-寻找两个正序数组的中位数" class="headerlink" title="4. 寻找两个正序数组的中位数"></a>4. 寻找两个正序数组的中位数</h2><p>给定两个大小分别为m和n的正序（从小到大）数组nums1和nums2。请你找出并返回这两个正序数组的中位数。</p>
<img src="/2022/05/01/record02/example02.jpg" class="" title="这是一张图片">
<p>先贴出答案，然后一步步讲解。</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    <span class="built_in">int</span> find<span class="constructor">Kth(<span class="params">const</span> <span class="params">vector</span>&lt;<span class="params">int</span>&gt;&amp; <span class="params">a</span>,<span class="params">int</span> <span class="params">sta</span>,<span class="params">const</span> <span class="params">vector</span>&lt;<span class="params">int</span>&gt;&amp; <span class="params">b</span>,<span class="params">int</span> <span class="params">stb</span>,<span class="params">int</span> <span class="params">kth</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(sta &gt;= a.size<span class="literal">()</span>) return b<span class="literal">[<span class="identifier">kth</span> - <span class="number">1</span> + <span class="identifier">stb</span>]</span>;</span><br><span class="line">        <span class="keyword">if</span>(stb &gt;= b.size<span class="literal">()</span>) return a<span class="literal">[<span class="identifier">kth</span> - <span class="number">1</span> + <span class="identifier">sta</span>]</span>;</span><br><span class="line">        <span class="keyword">if</span>(kth<span class="operator"> == </span><span class="number">1</span>) return min(a<span class="literal">[<span class="identifier">sta</span>]</span> , b<span class="literal">[<span class="identifier">stb</span>]</span>);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">int</span> h = kth<span class="operator"> / </span><span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">int</span> vala = a.size<span class="literal">()</span> - sta &gt;= h ? a<span class="literal">[<span class="identifier">sta</span> + <span class="identifier">h</span> - <span class="number">1</span>]</span> : a.back<span class="literal">()</span>;</span><br><span class="line">        <span class="built_in">int</span> h_a = a.size<span class="literal">()</span> - sta &gt;= h ? h : a.size<span class="literal">()</span> - sta;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">int</span> valb = b.size<span class="literal">()</span> - stb &gt;= h ? b<span class="literal">[<span class="identifier">stb</span> + <span class="identifier">h</span> - <span class="number">1</span>]</span> : b.back<span class="literal">()</span>;</span><br><span class="line">        <span class="built_in">int</span> h_b = b.size<span class="literal">()</span> - stb &gt;= h ? h : b.size<span class="literal">()</span> - stb;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(vala &gt;= valb)&#123;</span><br><span class="line">            return find<span class="constructor">Kth(<span class="params">a</span>,<span class="params">sta</span>,<span class="params">b</span>,<span class="params">stb</span> + <span class="params">h_b</span>,<span class="params">kth</span> - <span class="params">h_b</span>)</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            return find<span class="constructor">Kth(<span class="params">a</span>,<span class="params">sta</span> + <span class="params">h_a</span>,<span class="params">b</span>,<span class="params">stb</span>,<span class="params">kth</span> - <span class="params">h_a</span>)</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    double find<span class="constructor">MedianSortedArrays(<span class="params">vector</span>&lt;<span class="params">int</span>&gt;&amp; <span class="params">a</span>, <span class="params">vector</span>&lt;<span class="params">int</span>&gt;&amp; <span class="params">b</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">int</span> n = a.size<span class="literal">()</span>;</span><br><span class="line">        <span class="built_in">int</span> m = b.size<span class="literal">()</span>;</span><br><span class="line">        <span class="built_in">int</span> k = n + m;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">int</span> k1 = (k + <span class="number">1</span>)<span class="operator"> / </span><span class="number">2</span>;</span><br><span class="line">        <span class="built_in">int</span> k2 = (k + <span class="number">2</span>)<span class="operator"> / </span><span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">int</span> ava_1 = find<span class="constructor">Kth(<span class="params">a</span>,0,<span class="params">b</span>,0,<span class="params">k1</span>)</span>;</span><br><span class="line">        <span class="built_in">int</span> ava_2 = find<span class="constructor">Kth(<span class="params">a</span>,0,<span class="params">b</span>,0,<span class="params">k2</span>)</span>;</span><br><span class="line"></span><br><span class="line">        return <span class="number">1.</span>*(ava_1 + ava_2)<span class="operator"> / </span><span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>本题用到数据结构中的二分查找法。<br>二分查找法的基本思路：<br>目标数组必须有序，我们找数组里的数通常会一个一个查找，这样的话效率非常低。二分查找是直接在有序数组中找到中间元素，我们想查找的数与中间元素进行对比，如果小就代表想找的数在中间元素的左方向(假设)，大的话就是右方向。于是我们在左边这一段找到左边这段的中间元素，通过比大小找到目标数字的区间，再从区间里继续寻找中间元素，反复比较，最后找到目标数字。<br>以上介绍的思路为一个数组，而这题涉及到两个数组，换种查找思路。</p>
<img src="/2022/05/01/record02/Binary_search01.jpg" class="" title="这是一张图片">
<p>首先计算两个数组的整体长度，中位数即为最中间的数或者是中间两数的平均数，所以我们只需要找到整体长度前半段，就能找到我们需要的中位数。因为这里有两个数组，因此，我们把整体长度前半段“一分为二”，一半放第一个数组的数字，另一半放第二个数组里的数字。(均为从小到大，不是随意抽取数组数字)。</p>
<img src="/2022/05/01/record02/Binary_search02.jpg" class="" title="这是一张图片">
<p>我们把第一个数组放入“一半”里的最大数字(即最右边的数字)和第二个数组放入“另一半”里的最大数字(即最右边的数字)进行比较，假设第一组的最大数字比第二组大，那么可以判断中位数不在第二组放入“一半”的数字里，即中位数应当存在于第一组和第二组剩余的数字里。</p>
<img src="/2022/05/01/record02/Binary_search03.jpg" class="" title="这是一张图片">
<ul>
<li><p>开始逐行分析与知识点回顾<br>  为了方便介绍思路:我们假定a&#x3D;{3，6，11，13}，b&#x3D;{4，9，12，14，16，20}，</p>
  <figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> n = a.<span class="keyword">size</span>();<span class="comment">//n = 4</span></span><br><span class="line"><span class="keyword">int</span> m = b.<span class="keyword">size</span>();<span class="comment">//m = 6</span></span><br><span class="line"><span class="keyword">int</span> k = n + m;<span class="comment">//k = 10</span></span><br></pre></td></tr></table></figure>
<p>  先看主函数，m和n分别是向量a与向量b的长度，k为总长度。</p>
  <figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">int</span> k1 = (k + <span class="number">1</span>) / <span class="number">2</span>; //k1 = <span class="number">5</span></span><br><span class="line"><span class="attribute">int</span> k2 = (k + <span class="number">2</span>) / <span class="number">2</span>; //k2 = <span class="number">6</span></span><br></pre></td></tr></table></figure>
<p>  常规来讲，长度可分为奇数与偶数，所以中位数位置都会有所不同。但通过c++环境的特性，我们可以把奇数偶数找中位数的算法统一为一个方式。如果是奇数，他们的+1 +2再除以2的结果是相同的，我们把这两个结果相加再除以2就能得到奇数的中位数的下标位置。同理，偶数+1 +2再除以2得到的是中间两个数的下标位置。</p>
  <figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="built_in">int</span> ava_1 = find<span class="constructor">Kth(<span class="params">a</span>,0,<span class="params">b</span>,0,<span class="params">k1</span>)</span>;</span><br><span class="line"><span class="built_in">int</span> ava_2 = find<span class="constructor">Kth(<span class="params">a</span>,0,<span class="params">b</span>,0,<span class="params">k2</span>)</span>;</span><br><span class="line">return <span class="number">1.</span>*(ava_1 + ava_2)<span class="operator"> / </span><span class="number">2</span>;</span><br></pre></td></tr></table></figure>
<p>  通过算法找到下标所对应的数字，最后返回中位数</p>
  <figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="comment">//int ava_1 = findKth(a,0,b,0,k1);</span></span><br><span class="line"><span class="built_in">int</span> find<span class="constructor">Kth(<span class="params">const</span> <span class="params">vector</span>&lt;<span class="params">int</span>&gt;&amp; <span class="params">a</span>,<span class="params">int</span> <span class="params">sta</span>,<span class="params">const</span> <span class="params">vector</span>&lt;<span class="params">int</span>&gt;&amp; <span class="params">b</span>,<span class="params">int</span> <span class="params">stb</span>,<span class="params">int</span> <span class="params">kth</span>)</span></span><br></pre></td></tr></table></figure>
<p>  接下来看ava_1函数部分：a和b代表我们输入进来的向量，sta和stb是a向量与b向量输入进来的起始下标。kth为我们索引的长度。kth &#x3D; k1;</p>
  <figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//int ava_1 = findKth(a,0,b,0,k1);</span></span><br><span class="line"><span class="built_in">if</span>(sta &gt;= a.size()) return <span class="selector-tag">b</span><span class="selector-attr">[kth - 1 + stb]</span>;</span><br><span class="line"><span class="built_in">if</span>(stb &gt;= b.size()) return <span class="selector-tag">a</span><span class="selector-attr">[kth - 1 + sta]</span>;</span><br><span class="line"><span class="built_in">if</span>(kth == <span class="number">1</span>) return <span class="built_in">min</span>(a[sta] , b[stb]);</span><br></pre></td></tr></table></figure>
<p>  此为结束递归函数的三种条件，即我们需要的初始下标大于a的长度时，就代表还没找到需要的数字，我们的a数组就已经索引完了，所以肯定我们需要找的数在b数组。第三种条件为我们找到最后索引长度为1，意味着我们找的数字要么在a数组或者b数组剩余的数字的第一位，所以只要比较a和b最小的数字就能找到我们需要找的数字</p>
  <figure class="highlight fortran"><table><tr><td class="code"><pre><span class="line"><span class="built_in">int</span> h = kth / <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">int</span> vala = a.<span class="built_in">size</span>() - sta &gt;= h ? a[sta + h - <span class="number">1</span>] : a.back();</span><br><span class="line"><span class="built_in">int</span> h_a = a.<span class="built_in">size</span>() - sta &gt;= h ? h : a.<span class="built_in">size</span>() - sta;</span><br><span class="line"></span><br><span class="line"><span class="built_in">int</span> valb = b.<span class="built_in">size</span>() - stb &gt;= h ? b[stb + h - <span class="number">1</span>] : b.back();</span><br><span class="line"><span class="built_in">int</span> h_b = b.<span class="built_in">size</span>() - stb &gt;= h ? h : b.<span class="built_in">size</span>() - stb;</span><br></pre></td></tr></table></figure>
  <img src="/2022/05/01/record02/Binary_search04.jpg" class="" title="这是一张图片">
<p>  h为索引长度的一半，也可理解每个向量需要索引数字的个数<br>  vala后面跟着三目运算，当a的长度减去起始长度大于需要索引的数字，就证明a数组是有空间提供“需要索引数字的个数”，于是vala&#x3D;“需要索引数字的个数”的最大值，也就是最右边的数，h_a意味着实际索引数字的个数，因为a是有空间提供，所以h_a&#x3D;h。如果a数组没有空间提供“需要索引数字的个数”，就直接vala&#x3D;a数组最右边的数组，h_a&#x3D;a的长度-a的索引的起始位置。</p>
  <figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(vala &gt;= valb)&#123;</span><br><span class="line">    return find<span class="constructor">Kth(<span class="params">a</span>,<span class="params">sta</span>,<span class="params">b</span>,<span class="params">stb</span> + <span class="params">h_b</span>,<span class="params">kth</span> - <span class="params">h_b</span>)</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    return find<span class="constructor">Kth(<span class="params">a</span>,<span class="params">sta</span> + <span class="params">h_a</span>,<span class="params">b</span>,<span class="params">stb</span>,<span class="params">kth</span> - <span class="params">h_a</span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>  当a索引的最大数字大于b索引的最大数字时，说明中位数绝对不在b索引的数字里。于是a的起始下标不动，b的起始下标移动到索引数字的右边一个单位，索引长度由之前的h更新为h-h_b，进行递归迭代。后面的过程看图即可。</p>
  <img src="/2022/05/01/record02/Binary_search05.jpg" class="" title="这是一张图片"></li>
</ul>
<h2 id="5-最长回文子串"><a href="#5-最长回文子串" class="headerlink" title="5. 最长回文子串"></a>5. 最长回文子串</h2><p>给你一个字符串s，找到s中最长的回文子串。</p>
<img src="/2022/05/01/record02/example03.jpg" class="" title="这是一张图片">
<p>先贴出答案，然后一步步讲解。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    <span class="type">string</span> longestPalindrome(<span class="type">string</span> s) &#123;</span><br><span class="line">        <span class="type">int</span> m = s.length();</span><br><span class="line">        vector&lt;vector&lt;<span class="type">bool</span>&gt;&gt; f(m , vector&lt;<span class="type">bool</span>&gt;(m , <span class="literal">false</span>));</span><br><span class="line">        <span class="type">int</span> p_left = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> maxlen = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; m;i++)&#123;</span><br><span class="line">            f[i][i] = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="built_in">len</span> = <span class="number">2</span>;<span class="built_in">len</span> &lt;= m;<span class="built_in">len</span>++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i + <span class="built_in">len</span> &lt;= m;i++)&#123;</span><br><span class="line">                <span class="type">int</span> j = i + <span class="built_in">len</span> - <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span>(s[i] != s[j]) <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">if</span>(<span class="built_in">len</span> &gt; <span class="number">2</span> &amp;&amp; f[i+<span class="number">1</span>][j<span class="number">-1</span>] == <span class="literal">false</span>) <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">                f[i][j] = <span class="literal">true</span>;</span><br><span class="line">                p_left = i;</span><br><span class="line">                maxlen =<span class="built_in">len</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> s.substr(p_left,maxlen);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>本题用到数据结构中的动态规划算法。<br>思路：跟第三题类似，需要定义一个左指针和右指针，长度由小到大进行递增。一个满足条件的回文子串的&#x3D;他的两端字符相等+剩下的子串是回文子串。</p>
<ul>
<li><p>开始逐行分析与知识点回顾</p>
  <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> m = s.<span class="built_in">length</span>();<span class="comment">//字符串长度</span></span><br><span class="line">vector&lt;vector&lt;<span class="type">bool</span>&gt;&gt; <span class="built_in">f</span>(m , <span class="built_in">vector</span>&lt;<span class="type">bool</span>&gt;(m , <span class="literal">false</span>)); <span class="comment">//定义了bool类型的二维数组，默认为false</span></span><br><span class="line"><span class="type">int</span> p_left = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> maxlen = <span class="number">1</span>;</span><br></pre></td></tr></table></figure>
<p>  bool类型二维数组[i][j]含义：如果字符串从i到j是回文子串，则返回true，否则就是false<br>  p_left为最长回文子串的左端点索引箭头，maxlen记录最长的回文子串长度</p>
  <figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">for(int i <span class="operator">=</span> <span class="number">0</span><span class="comment">;i &lt; m;i++)&#123;</span></span><br><span class="line">    f[i][i] <span class="operator">=</span> true<span class="comment">;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>  因为单个字符某种意义上也是回文子串，所以单个字符的字符串为true。</p>
  <figure class="highlight excel"><table><tr><td class="code"><pre><span class="line">for(<span class="built_in">int</span> <span class="built_in">len</span> = <span class="number">2</span>;<span class="built_in">len</span> &lt;= m;<span class="built_in">len</span>++)&#123;</span><br><span class="line">    for(<span class="built_in">int</span> i = <span class="number">0</span>;i + <span class="built_in">len</span> &lt;= m;i++)</span><br></pre></td></tr></table></figure>
<p>  长度从2开始递增，i为左端点索引箭头。</p>
  <figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> j = i + <span class="built_in">len</span> - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(s[i] != s[j]) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">len</span> &gt; <span class="number">2</span> &amp;&amp; f[i+<span class="number">1</span>][j<span class="number">-1</span>] == <span class="literal">false</span>) <span class="keyword">continue</span>;</span><br></pre></td></tr></table></figure>
<p>  j为右端点索引箭头<br>  如果目标字符串左端点与右端点不相同，则不是回文子串，continue跳过此次循环<br>  如果长度大于2，即使认证了两个端点相同也要鉴定里面一层是否为字符串，如果为false，依然continue跳过此次循环</p>
  <figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">f[i][j] <span class="operator">=</span> true<span class="comment">;</span></span><br><span class="line">p_left <span class="operator">=</span> i<span class="comment">;</span></span><br><span class="line"><span class="attribute">maxlen</span> <span class="operator">=</span>len<span class="comment">;</span></span><br></pre></td></tr></table></figure>
<p>  如果前面的满足都满足 证明此为回文子串，则p_left记录该指索引左端点，maxlen记录此时的长度</p>
  <figure class="highlight aspectj"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">return</span> s.<span class="title">substr</span><span class="params">(p_left,maxlen)</span></span>;</span><br></pre></td></tr></table></figure>
<p>  最后通过string里的函数substr获得最长回文子串<br>  substr(pos,len)：从pos位置开始拷贝len长度的字符</p>
</li>
</ul>
<h1 id="动态规划的入门学习"><a href="#动态规划的入门学习" class="headerlink" title="动态规划的入门学习"></a>动态规划的入门学习</h1><p>动态规划：Dynamic Programming，简称DP，如果某⼀问题有很多重叠⼦问题，使⽤动态规划是最有效的。<br>步骤：<br>1.确定dp数组(dp table)以及下标的含义<br>2.确认状态转移方程，即递推公式<br>3.dp数组如何初始化<br>4.遍历顺序的确定<br>5.推导整个dp数组</p>
<h2 id="509-斐波那契数"><a href="#509-斐波那契数" class="headerlink" title="509. 斐波那契数"></a>509. 斐波那契数</h2><p>斐波那契数（通常用 F(n)表示）形成的序列称为斐波那契数列。该数列由0和1开始，后面的每一项数字都是前面两项数字的和。</p>
<img src="/2022/05/01/record02/example04.jpg" class="" title="这是一张图片">
<p>先贴出答案，然后一步步讲解。</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="symbol">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">int</span> fib(<span class="built_in">int</span> N) &#123;</span><br><span class="line">        <span class="built_in">int</span> dp[<span class="number">31</span>];<span class="comment">//定义dp数组</span></span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">0</span>;<span class="comment">//初始化数组</span></span><br><span class="line">        dp[<span class="number">1</span>] = <span class="number">1</span>;<span class="comment">//初始化数组</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">2</span>; i &lt;= N; i++) &#123;</span><br><span class="line">            dp[i] = dp[i - <span class="number">1</span>] + dp[i - <span class="number">2</span>];<span class="comment">//状态方程</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[N];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>斐波那契数是动态规划中最简单直观的题。它直接把步骤2的状态转移方程、步骤3初始化的数字和步骤4的遍历顺序直接告诉你，而且步骤1的dp数组有现成且下标含义也简单易懂，所以推导起来很容易</p>
<h2 id="70-爬楼梯"><a href="#70-爬楼梯" class="headerlink" title="70. 爬楼梯"></a>70. 爬楼梯</h2><p>假设你正在爬楼梯。需要 n 阶你才能到达楼顶。每次你可以爬1或2个台阶。你有多少种不同的方法可以爬到楼顶呢？</p>
<img src="/2022/05/01/record02/example05.jpg" class="" title="这是一张图片">
<p>先贴出答案，然后一步步讲解。</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="symbol">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">int</span> climbStairs(<span class="built_in">int</span> n) &#123;</span><br><span class="line">        <span class="built_in">int</span> dp[<span class="number">46</span>];</span><br><span class="line">        dp[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">        dp[<span class="number">2</span>] = <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="built_in">int</span> i = <span class="number">3</span>;i &lt;= n;i++)&#123;</span><br><span class="line">            dp[i] = dp[i - <span class="number">1</span>] + dp[i - <span class="number">2</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>爬楼梯这题稍微抽象点，但也简单。我们先从最底层开始理解起 假设我们的起始台阶为第0阶，爬到第一个台阶的方法只有1个，爬到第二个台阶的方法有两个，分别是2，1+1。<br>如果我们想要爬到第三个台阶，有两种方式，从第一阶跨2个台阶或者从第二阶跨1个台阶。有两种方式但有几种方法呢？所以我们要得到跨第一个台阶的方法数量以及跨第二台阶的方法数量分别是1，2，所以爬到第三个台阶的方法数量为1+2&#x3D;3。<br>如果我们想要爬到第四个台阶，依然有两种方式，从第二阶跨2个台阶或者从第三阶跨1个台阶。有两种方式但有几种方法呢？我们得到跨第二个台阶的方法数量为2以及跨第三台阶的方法数量为3，所以爬到第四个台阶的方法数量为2+3&#x3D;5。 跟之前的斐波那契数很相似<br>所以<br>1.确定dp数组(dp table)以及下标的含义 &#x3D;&gt;int dp[46]; 下标代表从0到下标位置需要的方法数量<br>2.确认状态转移方程，即递推公式 &#x3D;&gt;dp[i] &#x3D; dp[i - 1] + dp[i - 2]; 想要爬到第i个台阶，有两种方式，两种方式对应的方法数量为dp[i - 1]和dp[i - 2]。<br>3.dp数组如何初始化  &#x3D;&gt;爬第一个阶梯和第二阶梯方法是很容易推导，所以我们定义dp[1] &#x3D; 1;dp[2] &#x3D; 2;<br>4.遍历顺序的确定 &#x3D;&gt;从第三阶梯开始，故从3开始<br>5.推导整个dp数组</p>
<h2 id="746-使用最小花费爬楼梯"><a href="#746-使用最小花费爬楼梯" class="headerlink" title="746. 使用最小花费爬楼梯"></a>746. 使用最小花费爬楼梯</h2><p>给你一个整数数组cost，其中cost[i]是从楼梯第i个台阶向上爬需要支付的费用。一旦你支付此费用，即可选择向上爬一个或者两个台阶。你可以选择从下标为0或下标为1的台阶开始爬楼梯。请你计算并返回达到楼梯顶部的最低花费。</p>
<img src="/2022/05/01/record02/example06.jpg" class="" title="这是一张图片">
<p>先贴出答案，然后一步步讲解。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minCostClimbingStairs</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; cost)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> m = cost.<span class="built_in">size</span>();</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dp</span><span class="params">( m + <span class="number">1</span>, <span class="number">0</span> )</span></span>;</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        dp[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>;i &lt;= m;i++)&#123;</span><br><span class="line">            dp[i] = <span class="built_in">min</span>(dp[i<span class="number">-1</span>]+cost[i<span class="number">-1</span>],dp[i<span class="number">-2</span>]+cost[i<span class="number">-2</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[m];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>先理解一下题意 如果你从i台阶想向上爬，就需支付i对应的cost，你可以选择爬1台阶或者选择爬2台阶。<br>这题跟之前的爬楼梯类似，但是增加了费用这一选项。如果跟之前一样dp数组的下标代表从0到下标位置需要的方法数量，我们的cost无法考虑进去，所以变换一种思路，dp数组表示从0到i台阶的费用，这样我们就把cost考虑进去，这里不需要考虑方法数量，题目只要求最小的费用。但是这种定义很难求得最小的费用，于是继续变换思路，dp数组表示从0到i台阶的最小费用。从“从下标为0或下标为1的台阶开始爬楼梯”得知，我们从0台阶到0台阶，或者0台阶到1台阶的最小费用都为0，所以初始化确定。假如我们到下标为2的台阶，他有两种方式，一种是0台阶选择跨2台阶，费用为0 + 0阶对应的cost；另一种是1台阶选择跨1台阶，费用为0 + 1阶对应的cost，我们需要求最小的费用所以就有了min(dp[0]+cost[0],dp[1]+cost[1])，这就是我们的状态转移方程了，遍历顺序从2起步<br>1.确定dp数组(dp table)以及下标的含义 &#x3D;&gt;vector<int> dp( m + 1, 0 ); 下标代表从0到下标位置需要的最小费用<br>2.确认状态转移方程，即递推公式 &#x3D;&gt;dp[i] &#x3D; min(dp[i-1]+cost[i-1],dp[i-2]+cost[i-2]); 爬到第i个台阶，有两种付费方式，两种付费方式对应为dp[i-1]+cost[i-1]和dp[i-2]+cost[i-2]。<br>3.dp数组如何初始化  &#x3D;&gt;dp[0] &#x3D; 0;dp[1] &#x3D; 0;<br>4.遍历顺序的确定 &#x3D;&gt;从第二阶梯开始，故从2开始<br>5.推导整个dp数组</p>
<h2 id="62-不同路径"><a href="#62-不同路径" class="headerlink" title="62. 不同路径"></a>62. 不同路径</h2><p>一个机器人位于一个mxn网格的左上角（起始点在下图中标记为“Start”）。机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角（在下图中标记为“Finish” ）。问总共有多少条不同的路径？</p>
<img src="/2022/05/01/record02/example07.jpg" class="" title="这是一张图片">
<p>先贴出答案，然后一步步讲解。</p>
<figure class="highlight inform7"><table><tr><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    int uniquePaths(int m, int n) &#123;</span><br><span class="line">        int dp<span class="comment">[m]</span><span class="comment">[n]</span> ;</span><br><span class="line">        </span><br><span class="line">        for(int i = 0;i &lt; m;i++)</span><br><span class="line">            dp<span class="comment">[i]</span><span class="comment">[0]</span> = 1;</span><br><span class="line"></span><br><span class="line">        for(int i = 0;i &lt; n;i++)</span><br><span class="line">            dp<span class="comment">[0]</span><span class="comment">[i]</span> = 1;</span><br><span class="line"></span><br><span class="line">        for(int i = 1;i &lt; m;i++)&#123;</span><br><span class="line">            for(int j = 1;j &lt; n;j++)&#123;</span><br><span class="line">                dp<span class="comment">[i]</span><span class="comment">[j]</span> = dp<span class="comment">[i]</span><span class="comment">[j - 1]</span> + dp <span class="comment">[i-1]</span><span class="comment">[j]</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return dp<span class="comment">[m-1]</span><span class="comment">[n-1]</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>我们先从简单的2x2网格入手。我们从起始点1x1出发，移动到1x2或者是2x1因为机器人只能右移或者左移，所以只有一条路径选择。移动到2x2有两种方式，一个从1x2或者2x1，两种方式都是1种选择，所以不难判断移动到2x2的路径选择有1+1&#x3D;2种。所以dp数组得建立一个二维数组。[i][j]下标代表到达ixj的路径个数。我们的初始化很容易确定，即第一行和第一列的路径选择都是1。状态转移方程为dp[i][j] &#x3D; dp[i][j - 1] + dp [i-1][j];从下标1还是遍历<br>1.确定dp数组(dp table)以及下标的含义 &#x3D;&gt;int dp[m][n] ; 下标代表到达对应位置的路径数量<br>2.确认状态转移方程，即递推公式 &#x3D;&gt;dp[i][j] &#x3D; dp[i][j - 1] + dp [i-1][j] 到ixj位置的方式有ix(j-1)下移 (i-1)xj右移 路径数量则是到达ix(j-1)和(i-1)xj的路径数量之和<br>3.dp数组如何初始化  &#x3D;&gt;dp[i][0] &#x3D; 1;  dp[0][i] &#x3D; 1;第一行和第一列的路径选择只有一种<br>4.遍历顺序的确定 &#x3D;&gt;从1x1开始<br>5.推导整个dp数组</p>
<h2 id="63-不同路径-II"><a href="#63-不同路径-II" class="headerlink" title="63. 不同路径 II"></a>63. 不同路径 II</h2><p>一个机器人位于一个mxn网格的左上角（起始点在下图中标记为“Start”）。机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角（在下图中标记为“Finish”）。现在考虑网格中有障碍物。那么从左上角到右下角将会有多少条不同的路径？网格中的障碍物和空位置分别用1和0来表示。</p>
<img src="/2022/05/01/record02/example08.jpg" class="" title="这是一张图片">
<p>先贴出答案，然后一步步讲解。</p>
<figure class="highlight stan"><table><tr><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    <span class="type">int</span> uniquePathsWithObstacles(<span class="type">vector</span>&lt;<span class="type">vector</span>&lt;<span class="type">int</span>&gt;&gt;&amp; obstacleGrid) &#123;</span><br><span class="line">        <span class="type">int</span> raws = obstacleGrid.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> <span class="built_in">cols</span> = obstacleGrid[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">vector</span>&lt;<span class="type">vector</span>&lt;<span class="type">int</span>&gt;&gt; dp(raws, <span class="type">vector</span>&lt;<span class="type">int</span>&gt;(<span class="built_in">cols</span>, <span class="number">0</span>));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; raws &amp;&amp; obstacleGrid[i][<span class="number">0</span>] == <span class="number">0</span>;i++)&#123;</span><br><span class="line">            dp[i][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; <span class="built_in">cols</span> &amp;&amp; obstacleGrid[<span class="number">0</span>][i] == <span class="number">0</span>;i++)&#123;</span><br><span class="line">            dp[<span class="number">0</span>][i] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt; raws;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>;j &lt; <span class="built_in">cols</span>;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(obstacleGrid[i][j] == <span class="number">1</span>)&#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                dp[i][j] = dp[i][j - <span class="number">1</span>] + dp [i-<span class="number">1</span>][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[raws - <span class="number">1</span>][<span class="built_in">cols</span> - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>这题思路跟之前的一样，只不过需要判断所到的点是否有障碍物。dp数组的含义依然是到达对应位置的路径数量，但是初始化的时候第一行或者第一列如果遇到障碍物则令其对应位置的路径数量为0，且这位置往右或者往下的所有位置都为0，因为有了阻碍所以让后面的位置不能初始化，先暂定为0。然后就判断当我们到达的位置判断0或1，如果是0则表示无障碍，可以进行动态规划，如果不可以则跳过此次循环。<br>1.确定dp数组(dp table)以及下标的含义 &#x3D;&gt;vector&lt;vector<int>&gt; dp(raws, vector<int>(cols, 0)); 下标代表到达对应位置的路径数量<br>2.确认状态转移方程，即递推公式 &#x3D;&gt;dp[i][j] &#x3D; dp[i][j - 1] + dp [i-1][j] 到ixj位置的方式有ix(j-1)下移 (i-1)xj右移 路径数量则是到达ix(j-1)和(i-1)xj的路径数量之和<br>3.dp数组如何初始化  &#x3D;&gt;dp[i][0] &#x3D; 1;  dp[0][i] &#x3D; 1;第一行和第一列的路径选择只有一种<br>4.遍历顺序的确定 &#x3D;&gt;从1x1开始<br>5.推导整个dp数组</p>
<p>OK~动态规划就学这么多，因为之前在leetcode遇到的题以及接下来的题都遇到动态规划，所以特地先去网上找了些资料当专题刷了一下。leetcode先暂停更新，等动态规划所有题型刷完就回来继续刷热题100道！</p>
<p>分享最近读的书《掌握习惯》<br>很喜欢里面的几句话<br>–你可能会出于某种动机而培养一种习惯，但让你长期保持这种习惯的唯一原因是它已经与你的身份融为一体。<br>–你此时此刻是成就辉煌还是一事无成并不重要，重要的是你当前的习惯是否让你走上了通向成功的道路。<br>希望我能坚持把Blog更新下去，然后培养读书的习惯，就像那本书所说，习惯培养起来了，目标不会太远。希望每一步一步脚印能让我变得更好~下周见</p>
]]></content>
  </entry>
  <entry>
    <title>First learning record in May</title>
    <url>/2022/05/06/record03/</url>
    <content><![CDATA[<p>分享五月第一周学习内容</p>
<span id="more"></span>
<h1 id="动态规划的入门学习"><a href="#动态规划的入门学习" class="headerlink" title="动态规划的入门学习"></a>动态规划的入门学习</h1><p>动态规划：Dynamic Programming，简称DP，如果某⼀问题有很多重叠⼦问题，使⽤动态规划是最有效的。<br>步骤：<br>1.确定dp数组(dp table)以及下标的含义<br>2.确认状态转移方程，即递推公式<br>3.dp数组如何初始化<br>4.遍历顺序的确定<br>5.推导整个dp数组</p>
<h2 id="343-整数拆分"><a href="#343-整数拆分" class="headerlink" title="343. 整数拆分"></a>343. 整数拆分</h2><p>给定一个正整数n，将其拆分为k个正整数的和（k &gt;&#x3D; 2），并使这些整数的乘积最大化。返回你可以获得的最大乘积。</p>
<img src="/2022/05/06/record03/dpExample01.jpg" class="" title="这是一张图片">
<p>先贴出答案，然后一步步讲解。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">integerBreak</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dp</span><span class="params">(n+<span class="number">1</span>)</span></span>;</span><br><span class="line">        dp[<span class="number">2</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>;i &lt;= n;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>;j &lt; i/<span class="number">2</span>+<span class="number">1</span>;j++)&#123;</span><br><span class="line">                dp[i] = <span class="built_in">max</span>(dp[i],<span class="built_in">max</span>(dp[i-j]*j,(i-j)*j));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>首先举个栗子<br>当n&#x3D;2时，拆分的数字为1和1。乘积为1。<br>当n&#x3D;3时，拆分的数字为2和1。乘积为2。<br>当n&#x3D;4时，拆分的数字为2和2。乘积为4。<br>当n&#x3D;5时，拆分的数字为2和3。乘积为6。<br>当n&#x3D;6时，拆分的数字为3和3。乘积为9。<br>当n&#x3D;7时，拆分的数字为2、3和2或者4和3。乘积为12。<br>当n&#x3D;8时，拆分的数字为2、3和3。乘积为18。<br>当n&#x3D;9时，拆分的数字为3、3和3。乘积为27。<br>当n&#x3D;10时，拆分的数字为2、3、2和3。乘积为36。<br>首先第一步要从这些栗子中找到动态规划的规律，我们才能列出dp的含义以及动态方程。<br>乍一看没啥思路，其实我们可以把栗子作进一步拆解。<br>当n&#x3D;2时，拆分的数字为1和1。最大乘积为1。<br>当n&#x3D;3时，拆分的数字为2和1。2的最大乘积乘以1等于1，2的本身乘以1等于2。于是3的最大乘积等于2。<br>当n&#x3D;4时，第一种拆分的数字为3和1。3的最大乘积乘以1等于2，3的本体乘以1等于3；第二种拆分的数字为2和2，2的最大乘积乘以2等于2，2的本身乘以2等于4。于是4的最大乘积等于4。<br>当n&#x3D;5时，第一种拆分方式为4和1。4的最大乘积乘以1等于4，4的本身乘以1等于4。第二种拆分方式为3和2，3的最大乘积乘以2等于4，3的本身乘以2等于6。于是5的最大乘积等于6。<br>当n&#x3D;6时，第一种拆分方式为4和2(1直接略过)。4的最大乘积乘以2等于8，4的本身乘以2等于8。第二种拆分方式为3和3。3的最大乘积乘以3等于6，3的本身乘以3等于9。于是6的最大乘积等于9。<br>当n&#x3D;7时，第一种拆分方式为5和2(1直接略过)。5的最大乘积乘以2等于12，5的本身乘以2等于10。第二种拆分方式为4和3。4的最大乘积乘以3等于12，4的本身乘以3等于12。于是7的最大乘积等于12。<br>当n&#x3D;8时，第一种拆分方式为6和2(1直接略过)。6的最大乘积乘以2等于18，6的本身乘以2等于12。第二种拆分方式为5和3。5的最大乘积乘以3等于18，5的本身乘以3等于15。第三种拆分方式为4和4。4的最大乘积乘以4等于16，4的本身乘以4等于16。于是8的最大乘积等于18。<br>当n&#x3D;9时，第一种拆分方式为7和2(1直接略过)。7的最大乘积乘以2等于24，7的本身乘以2等于14。第二种拆分方式为6和3。6的最大乘积乘以3等于27，6的本身乘以3等于18。第三种拆分方式为5和4。5的最大乘积乘以4等于24，5的本身乘以4等于20。于是9的最大乘积等于27。<br>当n&#x3D;10时，第一种拆分方式为8和2(1直接略过)。8的最大乘积乘以2等于36，8的本身乘以2等于16。第二种拆分方式为7和3。7的最大乘积乘以3等于36，7的本身乘以3等于21。第三种拆分方式为6和4。6的最大乘积乘以4等于36，6的本身乘以4等于24。第四种拆分方式为5和5。5的最大乘积乘以5等于30，5的本身乘以5等于25。于是10的最大乘积等于36。<br>现在思路清晰了，我们先把数字A拆成1和A-1，直接讨论A-1的最大乘积大还是A-1本身大，最大的那个数乘以1得到的结果就是在1状态下数字A的最大乘积。继续把A拆成2和A-2，直接讨论A-2的最大乘积大还是A-2本身大，最大的那个数乘以2得到的结果就是在2状态下数字A的最大乘积……最后比较这些状态下的最大乘积，我们就能得到A的最大乘积。</p>
<p>1.确定dp数组(dp table)以及下标的含义    dp[i]的含义是在第i个数下的最大乘积。<br>2.确认状态转移方程，即递推公式      dp[i] &#x3D; max(dp[i],max(dp[i-j]*j,(i-j)*j))   max(dp[i-j]*j,(i-j)*j)代表j状态下的i最大乘积，max里的dp[i]代表之前也就是j-1状态下的i最大乘积，两者需要相互比较。<br>3.dp数组如何初始化      dp[2] &#x3D; 1;<br>4.遍历顺序的确定        i表示从第2个数字，按照正序遍历到n。j就代表拆分下的j状态数字。<br>5.推导整个dp数组</p>
<h2 id="背包二维"><a href="#背包二维" class="headerlink" title="背包二维"></a>背包二维</h2><p>有N件物品和⼀个最多能被重量为W的背包。第i件物品的重量是weight[i]，得到的价值是value[i]。每件物品只能⽤⼀次，求解将哪些物品装⼊背包⾥物品价值总和最⼤。</p>
<img src="/2022/05/06/record03/dpExample02.jpg" class="" title="这是一张图片">
<p>先贴出答案，然后一步步讲解。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test_weibagPromble</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	vector&lt;<span class="type">int</span>&gt; weight = &#123;<span class="number">1</span> , <span class="number">3</span> , <span class="number">4</span>&#125;;</span><br><span class="line">	vector&lt;<span class="type">int</span>&gt; value = &#123;<span class="number">15</span> , <span class="number">20</span>, <span class="number">30</span> &#125;;</span><br><span class="line">	<span class="type">int</span> bagweight = <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line">	vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">dp</span>(weight.<span class="built_in">size</span>() + <span class="number">1</span>, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(bagweight + <span class="number">1</span>, <span class="number">0</span>));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = bagweight; i &gt;= weight[<span class="number">0</span>]; i--) &#123;</span><br><span class="line">		dp[<span class="number">0</span>][i] = value[<span class="number">0</span>];</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; weight.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt;= bagweight; j++) &#123;</span><br><span class="line">			<span class="keyword">if</span> (j &lt; weight[i]) &#123;</span><br><span class="line">				dp[i][j] = dp[i - <span class="number">1</span>][j];</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> &#123;</span><br><span class="line">				dp[i][j] = <span class="built_in">max</span>(dp[i - <span class="number">1</span>][j], dp[i - <span class="number">1</span>][j - weight[i]] + value[i]);</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; dp[weight.<span class="built_in">size</span>() - <span class="number">1</span>][bagweight] &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">test_weibagPromble</span>();</span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>此题为[代码随想录].pdf上的一道背包题目，所以运行环境不在LeetCode上而是在VS studio上。<br>首先我们联想一下上一道拆分数组。拆分数组的思路是把数字A拆分成1状态和A-1，然后搜寻A-1的最大值。然后拆分成2状态和A-2，然后搜寻1-2的最大值。我们照葫芦画瓢，运用到这题上：<br>假设第一个物品重量为weight[0]，价值为value[0]。背包重量为j，我们就理解成当j&gt;weight[0]时，j此时的最大价值&#x3D;背包重量为j-weight[0]时的最大价值+value[0]。j&lt;weight[0]时，j此时的最大价值&#x3D;没有装入第一个物品的最大价值。<br>假设第二个物品重量为weight[1]，价值为value[1]。背包重量为j，我们就理解成当j&gt;weight[1]时，j此时的最大价值&#x3D;背包重量为j-weight[1]时的最大价值+value[1]。j&lt;weight[1]时，j此时的最大价值&#x3D;没有装入第一个物品的最大价值。<br>但怎么求“背包重量为W-weight[0]时的最大价值”呢？<br>于是我们要遍历从0到W的背包重量，那么很容易看出dp应该是二维数组，dp[i][j]为背包重量为j时装第i个物品的最大价值。<br>那么dp[i][j]是怎么来的？<br>当j&lt;weight[i]时，代表重量为j的背包装不下第i个物品，于是最大价值dp[i][j]应等于重量为j的背包装第i-1件时的物品时的最大值。<br>当j&gt;weight[i]时，代表重量为j的背包能装下第i个物品，于是最大价值dp[i][j]应从重量为j的背包装第i-1件时的物品时的最大值或者背包重量为j-weight[i]时的最大价值+value[i]中选出最大值。<br>那怎么初始化？<br>背包重量为0时，装不下任何物品，故dp[i][0]都为0。<br>讨论第一个物品时，应该背包里没有其他物品，所以当j&gt;weight[0]时，dp[0][j]价值都为第一物品的价值value[0]；当j&lt;weight[0]时，价值依然为0。</p>
<p>1.确定dp数组(dp table)以及下标的含义    dp[i][j]为背包重量为j时装第i个物品的最大价值。<br>2.确认状态转移方程，即递推公式      当j&lt;weight[i]时，dp[i][j]&#x3D; dp[i - 1][j]。 当j&gt;weight[i]时，dp[i][j] &#x3D; max(dp[i - 1][j], dp[i - 1][j - weight[i]] + value[i]);<br>3.dp数组如何初始化      dp[0][i] &#x3D; value[0]  当j&gt;weight[0]时，dp[0][j]价值都为第一物品的价值value[0]；当j&lt;weight[0]时，价值依然为0。<br>4.遍历顺序的确定        i代表物品，因为C++数组的原因，本应从0开始遍历，但之前初始化了，所以从1开始（也就是从第二个物品）开始遍历。j代表背包重量，从0开始<br>5.推导整个dp数组</p>
<h2 id="背包一维"><a href="#背包一维" class="headerlink" title="背包一维"></a>背包一维</h2><p>有N件物品和⼀个最多能被重量为W的背包。第i件物品的重量是weight[i]，得到的价值是value[i] 。每件物品只能⽤⼀次，求解将哪些物品装⼊背包⾥物品价值总和最⼤。</p>
<img src="/2022/05/06/record03/dpExample02.jpg" class="" title="这是一张图片">
<p>先贴出答案，然后一步步讲解。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test_weibagPromble</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	vector&lt;<span class="type">int</span>&gt; weight = &#123; <span class="number">1</span> , <span class="number">3</span> , <span class="number">4</span> &#125;;</span><br><span class="line">	vector&lt;<span class="type">int</span>&gt; value = &#123; <span class="number">15</span> , <span class="number">20</span>, <span class="number">30</span> &#125;;</span><br><span class="line">	<span class="type">int</span> bagweight = <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line">	<span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dp1</span><span class="params">(bagweight + <span class="number">1</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; weight.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> j = bagweight; j &gt;= weight[i]; j--) &#123;</span><br><span class="line">			dp1[j] = <span class="built_in">max</span>(dp1[j], dp1[j - weight[i]] + value[i]);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	cout &lt;&lt; dp1[bagweight] &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">test_weibagPromble</span>();</span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>此题为[代码随想录].pdf上的一道背包题目，所以运行环境不在LeetCode上而是在VS studio上。<br>之前的dp为二维数组。那怎么运用到一维数组？<br>二维dp数组的含义是 dp[i][j]为背包重量为j时装第i个物品的最大价值，dp[i]如果表示第i个物品的最大价值显然不行，那么表示成dp[j]为背包重量为j时的最大价值呢。<br>那么dp[j]怎么来呢？<br>回顾一下二维数组的dp来源<br>当j&lt;weight[i]时，代表重量为j的背包装不下第i个物品，于是最大价值dp[i][j]应等于重量为j的背包装第i-1件时的物品时的最大值。<br>当j&gt;weight[i]时，代表重量为j的背包能装下第i个物品，于是最大价值dp[i][j]应从重量为j的背包装第i-1件时的物品时的最大值或者背包重量为j-weight[i]时的最大价值+value[i]中选出最大值。<br>那么更换成一维数组dp<br>当j&lt;weight[i]时，代表重量为j的背包装不下第i个物品，于是最大价值dp[j]应等于重量为j的背包装第i-1件时的物品时的最大值。<br>当j&gt;weight[i]时，代表重量为j的背包能装下第i个物品，于是最大价值dp[j]应从重量为j的背包装第i-1件时的物品时的最大值或者背包重量为j-weight[i]时的最大价值+value[i]中选出最大值。<br>那么可以确认 dp[j] &#x3D; max(dp[j],dp[j - weight[i]] + value[i]) max里的dp[j]就是重量为j的背包装第i-1件时的物品时的最大值。<br>那怎么初始化？<br>众所周知重量为0时啥也装不下，所以价值必为0，所以dp[0] &#x3D; 0；从max和value不可能为负数可以得知，我们也可以把dp整个数组的数都初始为0，定义为0对之后在max里取最大值也没啥影响。<br>遍历顺序怎么确定？<br>如果是正序，那么会遇到一个问题。假如物品重量为1，价值为value[1]<br>当j&#x3D;1时，dp[1]&#x3D;value[1]。<br>当j&#x3D;2时候，因为dp[2] &#x3D; max(dp[2],dp[2 - weight[1]] + value[1])，max里的dp[2]&#x3D;0，dp[2 - weight[1]] + value[1]&#x3D;dp[1]+value[1]&#x3D;2xvalue[1]。也就是说在j&#x3D;2的时候value取了两次值。<br>所以不能正序遍历，那逆序呢？<br>当j&#x3D;4时，因为dp[4] &#x3D; max(dp[4],dp[4 - weight[1]] + value[1])，max里的dp[4]&#x3D;0，dp[4 - weight[1]] + value[1]&#x3D;dp[3]+value[1]&#x3D;value[1]。<br>当j&#x3D;3时候，因为dp[3] &#x3D; max(dp[3],dp[3 - weight[1]] + value[1])，max里的dp[3]&#x3D;0，dp[3 - weight[1]] + value[1]&#x3D;dp[2]+value[1]&#x3D;value[1]。这样就不会产生取两次值的情况。</p>
<p>1.确定dp数组(dp table)以及下标的含义    dp[j]为背包重量为j时的最大价值。<br>2.确认状态转移方程，即递推公式      dp[j] &#x3D; max(dp[j],dp[j - weight[i]] + value[i])<br>3.dp数组如何初始化      dp[j]&#x3D; 0<br>4.遍历顺序的确定        逆序。<br>5.推导整个dp数组</p>
<h2 id="分割等和子集"><a href="#分割等和子集" class="headerlink" title="分割等和子集"></a>分割等和子集</h2><p>给你一个只包含正整数的非空数组nums。请你判断是否可以将这个数组分割成两个子集，使得两个子集的元素和相等。</p>
<img src="/2022/05/06/record03/dpExample03.jpg" class="" title="这是一张图片">
<p>先贴出答案，然后一步步讲解。</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">canPartition</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; nums.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">            sum += nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(sum % <span class="number">2</span> == <span class="number">1</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="type">int</span> sumHalf = sum/<span class="number">2</span>;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dp</span><span class="params">(sumHalf + <span class="number">1</span>,<span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; nums.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = sumHalf;j &gt;= nums[i];j--)&#123;</span><br><span class="line">                dp[j] = <span class="built_in">max</span>(dp[j],dp[j-nums[i]]+nums[i]); </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(dp[sumHalf] == sumHalf) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>两个子集的元素和相等，可以推断出两个子集的元素和相加等于原数组nums各个数字之和，换句话说两个子集元素的和是nums各个元素和的一半，所以不难判断如果nums各个元素和为奇数，那么false。<br>那么怎么确认dp[i]还是dp[i][j]？<br>刚才我们分析出两个子集的元素和等于nums各个元素和的一半，我们令nums的和为sum，子集元素和为sumHalf。我们可以能把这题转换为刚才的背包问题，两个子集就是两个背包，sumHalf为背包重量，nums里的元素即为物品重量，这里的价值可以看成放入背包物品的最大重量，最大容量不能超过背包重量。根据之前的背包一维dp[j]为背包重量为j时的最大价值可以推断出dp[i]为背包重量为i时候的放入物品的最大重量。那么我要做的就是在背包重量为sumHalf时(dp[sumHalf])放入物品的最大重量等于sumHalf，那样的话另一个背包放入物品的最大重量必定sum-dp[sumHalf],如果sumHalf &#x3D;&#x3D; sum-dp[sumHalf]，或者dp[sumHalf] &#x3D; sumHalf，那直接返回true。<br>那怎么初始化？<br>跟之前一维背包一样，全部定义为0即可。<br>遍历顺序跟一维背包一样，采用逆序。<br>1.确定dp数组(dp table)以及下标的含义    dp[j]为背包重量为j时的放入物品的最大重量。<br>2.确认状态转移方程，即递推公式      dp[j] &#x3D; max(dp[j],dp[j - nums[i]] + nums[i])<br>3.dp数组如何初始化      dp[j]&#x3D; 0<br>4.遍历顺序的确定        逆序。<br>5.推导整个dp数组</p>
<p>OK~动态规划就学这么多(其实还有一题- -)，因为最近学校解封，跟同学各种聚餐…所以就更了这么点- -下周好好干会来！！多学点知识！！</p>
]]></content>
      <categories>
        <category>嵌入式</category>
        <category>c++</category>
      </categories>
      <tags>
        <tag>每周学习</tag>
        <tag>leetcode</tag>
        <tag>动态规划</tag>
      </tags>
  </entry>
  <entry>
    <title>Second learning record in May</title>
    <url>/2022/05/15/record04/</url>
    <content><![CDATA[<p>分享五月第二周学习内容</p>
<span id="more"></span>
<h1 id="动态规划的入门学习"><a href="#动态规划的入门学习" class="headerlink" title="动态规划的入门学习"></a>动态规划的入门学习</h1><p>动态规划：Dynamic Programming，简称DP，如果某⼀问题有很多重叠⼦问题，使⽤动态规划是最有效的。<br>步骤：<br>1.确定dp数组(dp table)以及下标的含义<br>2.确认状态转移方程，即递推公式<br>3.dp数组如何初始化<br>4.遍历顺序的确定<br>5.推导整个dp数组</p>
<h2 id="1049-最后一块石头的重量-II"><a href="#1049-最后一块石头的重量-II" class="headerlink" title="1049. 最后一块石头的重量 II"></a>1049. 最后一块石头的重量 II</h2><p>有一堆石头，用整数数组stones表示。其中 stones[i] 表示第i块石头的重量。每一回合，从中选出任意两块石头，然后将它们一起粉碎。假设石头的重量分别为x和y，且x &lt;&#x3D; y。那么粉碎的可能结果如下：<br>如果x &#x3D;&#x3D; y，那么两块石头都会被完全粉碎；<br>如果x !&#x3D; y，那么重量为x的石头将会完全粉碎，而重量为y的石头新重量为y-x。<br>最后，最多只会剩下一块石头。返回此石头最小的可能重量。如果没有石头剩下，就返回0。</p>
<img src="/2022/05/15/record04/dpExample01.jpg" class="" title="这是一张图片">
<p>先贴出答案，然后一步步讲解。</p>
<figure class="highlight fortran"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> Solution &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">int</span> lastStoneWeightII(vector&lt;<span class="built_in">int</span>&gt;&amp; stones) &#123;</span><br><span class="line">        vector&lt;<span class="built_in">int</span>&gt; dp(<span class="number">15001</span>,<span class="number">0</span>);</span><br><span class="line">        <span class="built_in">int</span> <span class="built_in">sum</span> = <span class="number">0</span>;</span><br><span class="line">        for(<span class="built_in">int</span> i = <span class="number">0</span>;i &lt; stones.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">            <span class="built_in">sum</span> += stones[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">int</span> <span class="keyword">target</span> = <span class="built_in">sum</span> / <span class="number">2</span>;</span><br><span class="line">        for(<span class="built_in">int</span> i = <span class="number">0</span>;i &lt; stones.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">            for(<span class="built_in">int</span> j = <span class="keyword">target</span>;j &gt;= stones[i];j--)&#123;</span><br><span class="line">                dp[j] = <span class="built_in">max</span>(dp[j],dp[j - stones[i]] + stones[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">sum</span> - dp[<span class="keyword">target</span>] - dp[<span class="keyword">target</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>dp的含义？<br>这题跟上周写的“分割等和子集”类似，只不过换了种表达方式。“石头碰撞后最小重量”可以翻译为：石头分为两个背包，两个背包的和尽可能相近，最好相等。所以dp跟“分割等和子集”类似。在“分割等和子集”理，dp[j]的含义为背包重量为j时能容量最大的数字和。所以在这题可以理解为背包重量之和为j时能能容量最大的数字和<br>dp来源？<br>“分割等和子集”的dp[j]来源为dp[j]自身的重量与dp[j-nums[i]]+nums[i]的最大值。<br>因此本题的dp来源为 dp[j]与dp[j - stones[i]] + stones[i]的最大值。<br>dp的初始化？<br>默认为0。<br>遍历顺序？<br>石头的选择从头开始遍历到最后，背包的重量从最大开始遍历。</p>
<h2 id="494-目标和"><a href="#494-目标和" class="headerlink" title="494. 目标和"></a>494. 目标和</h2><p>给你一个整数数组nums和一个整数target。向数组中的每个整数前添加’+’或’-‘，然后串联起所有整数，可以构造一个表达式：<br>例如，nums &#x3D; [2, 1] ，可以在 2 之前添加 ‘+’ ，在 1 之前添加 ‘-‘ ，然后串联起来得到表达式”+2-1” 。<br>返回可以通过上述方法构造的、运算结果等于target的不同表达式的数目。</p>
<img src="/2022/05/15/record04/dpExample02.jpg" class="" title="这是一张图片">
<p>先贴出答案，然后一步步讲解。</p>
<figure class="highlight fortran"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> Solution &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">int</span> findTargetSumWays(vector&lt;<span class="built_in">int</span>&gt;&amp; nums, <span class="built_in">int</span> <span class="keyword">target</span>) &#123;</span><br><span class="line">        <span class="built_in">int</span> m = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="built_in">int</span> sums = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        for(<span class="built_in">int</span> i = <span class="number">0</span>;i &lt; m;i++)&#123;</span><br><span class="line">            sums += nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">target</span> &gt; sums)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>((<span class="keyword">target</span> + sums) % <span class="number">2</span> == <span class="number">1</span> || (<span class="keyword">target</span> + sums) &lt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">int</span> targetBag = (sums + <span class="keyword">target</span>) / <span class="number">2</span>;</span><br><span class="line">        vector&lt;<span class="built_in">int</span>&gt; dp(targetBag + <span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">        </span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        for(<span class="built_in">int</span> i = <span class="number">0</span>;i &lt; m;i++)&#123;</span><br><span class="line">            for(<span class="built_in">int</span> j = targetBag;j &gt;= nums[i];j--)&#123;</span><br><span class="line">                dp[j] += dp[j - nums[i]];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[targetBag];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>1.确定dp数组(dp table)以及下标的含义<br>本题比较特殊，之前求的要么是背包的最大重量要么是背包里的物品的最大价值。但本题求的是不同表达式的组合数目，但思路还是能借鉴。比如之前的dp都是求最大物品重量，那么我们把这题分成两个背包，一个背包数字和为A，另一个背包数字和为B。A+B&#x3D;整数数组nums所有元素之和，A-B为target。所以我们只要讨论A和B其中一个背包，另一个背包也就直接出来。我们这里讨论A背包。dp[j]理解为当A背包里的数字和j时的不同组合方式最多为dp[j]种。<br>2.确认状态转移方程，即递推公式<br>模仿之前的题，我们的dp[j]的来源就为dp[j]本身与dp[j - nums[i]]的最大值，但这种方法是求最大“重量数”，而我们要求的是最大的“组合数”。打个比方：5的的组合方法有很多：1+4，2+3,3+2,4+1。当1为已知时，我们就得确认4的组合方法数量。当2为已知时，我们就得确认3的组合方法数量。当3为已知时，我们就得确认2的组合方法数量……所以5的最大组合方法数量为1+4，2+3,3+2,4+1的最大组合数之和，所以我们dp来源应该是某种数量的叠加。继续打比方：5的的组合方法有很多，但物品栏只有1和3，因此我们只需探求1和3时候的最大组合数量。即当1为已知时，我们就得确认4的组合方法数量。当3为已知时，我们就得确认2的组合方法数量，5的最大组合数量应为1+4,3+2的最大组合数之和。所以dp[j]的来源应为dp[j]+dp[j - nums[i]]。<br>3.dp数组如何初始化<br>因为dp[j]的来源应为dp[j]与dp[j - nums[i]]叠加，所以如果令dp[0]初始值为0，那后面的叠加全是0。然后根据我们对题目的分析，如果target为0的话也就是j&#x3D;0，那我们dp[0]初始值为1？说实话，在[代码随想录].pdf的解释为“装满容量为0的背包，有1种⽅法，就是装0件物品。”我觉得还是有点牵强，但我也不晓得如何解释(恼火)。<br>4.遍历顺序的确定<br>首先确定dp的末端数字，我们已经整数数组nums和一个整数target，我们可以根据一个背包数字和为A，另一个背包数字和为B。A+B&#x3D;整数数组nums所有元素之和，A-B为target得到(A的大小为nums所有元素之和+target)&#x2F;2，物品(nums元素)从头遍历，背包从end开始往前遍历。<br>5.推导整个dp数组</p>
<h2 id="474-一和零"><a href="#474-一和零" class="headerlink" title="474. 一和零"></a>474. 一和零</h2><p>给你一个二进制字符串数组strs和两个整数m和n。请你找出并返回strs的最大子集的长度，该子集中最多有m个0和n个1。如果x的所有元素也是y的元素，集合x是集合y的子集。</p>
<img src="/2022/05/15/record04/dpExample03.jpg" class="" title="这是一张图片">
<p>先贴出答案，然后一步步讲解。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">getZeroOnes</span><span class="params">(string&amp; str)</span></span>&#123;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">zeroOnes</span><span class="params">(<span class="number">2</span>,<span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i&lt;str.<span class="built_in">length</span>();i++)&#123;</span><br><span class="line">            zeroOnes[str[i]-<span class="string">&#x27;0&#x27;</span>]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> zeroOnes;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">findMaxForm</span><span class="params">(vector&lt;string&gt;&amp; strs, <span class="type">int</span> m, <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">dp</span>(m+<span class="number">1</span>,<span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(n+<span class="number">1</span>,<span class="number">0</span>));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> l = <span class="number">0</span>;l &lt; strs.<span class="built_in">size</span>();l++)&#123;</span><br><span class="line">            vector&lt;<span class="type">int</span>&gt; zero0nes = <span class="built_in">getZeroOnes</span>(strs[l]);</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i = m;i&gt;=zero0nes[<span class="number">0</span>];i--)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> j = n;j&gt;=zero0nes[<span class="number">1</span>];j--)&#123;</span><br><span class="line">                    dp[i][j] = <span class="built_in">max</span>(dp[i][j],dp[i - zero0nes[<span class="number">0</span>]][j - zero0nes[<span class="number">1</span>]] + <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[m][n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>这题首先算出字符串数组strs里各个元素所含的0和1的个数，通过getZeroOnes函数，构建一个1x2向量，向量第0个位置代表0的数量，向量第1个位置代表1的数量。利用str[i]-‘0’的特性实现对元素含有1和0个数的计算。<br>1.确定dp数组(dp table)以及下标的含义<br>本题要求所选的元素的0和1个数和分别小于m和n，其实可以看做背包装一个物品，0的个数代表物品重量，1的个数代表物品价值。这个物品既要满足重量小于m，又要满足价值小于n。相比以往的题目即重量小于背包重量，价值取最大。多了一个限制条件。因此我们要在以往的题型基础上进行一个改进。以往对于只有一个条件即重量小于背包重量我们可以列dp[i][j]，又能dp[j]，我们一般采用后者，即dp[j]。现在多了一个条件即价值小于n，所以我们在这采用dp[i][j]。含义为0的个数最多为i，1的个数最多为j时，能在字符串数组sts中最多能挑选的元素个数为l。<br>2.确认状态转移方程，即递推公式<br>dp[i][j]的最大值要么来源于上次循环保留下来的dp[i][j]或者i&gt;&#x3D;zero0nes[0],j&gt;&#x3D;zero0nes[1]时，计算dp[i-zero0nes[0]][j - zero0nes[1]]的元素个数，再+1。即dp[i][j] &#x3D; max(dp[i][j],dp[i - zero0nes[0]][j - zero0nes[1]] + 1)。<br>3.dp数组如何初始化<br>再以往的题即“重量小于背包重量，价值取最大”中，一维数组dp默认为0.这题虽然有两个限制条件，但内核跟以往的题一模一样。所以同理，此题的初始化应全为0。<br>4.遍历顺序的确定<br>再以往的题即“重量小于背包重量，价值取最大”中，一维数组dp都是从后往前遍历，本题也如此，两个条件从后往前遍历。<br>5.推导整个dp数组</p>
<h2 id="完全背包"><a href="#完全背包" class="headerlink" title="完全背包"></a>完全背包</h2><p>有N件物品和⼀个最多能背重量为W的背包。第i件物品的重量是weight[i]，得到的价值是value[i]。每件物品都有⽆限个（也就是可以放⼊背包多次），求解将哪些物品装⼊背包⾥物品价值总和最⼤。<br>先贴出答案，然后一步步讲解。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test_weibagPromble2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	vector&lt;<span class="type">int</span>&gt; weight = &#123; <span class="number">1</span> , <span class="number">3</span> , <span class="number">4</span> &#125;;</span><br><span class="line">	vector&lt;<span class="type">int</span>&gt; value = &#123; <span class="number">15</span> , <span class="number">20</span>, <span class="number">30</span> &#125;;</span><br><span class="line">	<span class="type">int</span> bagweight = <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line">	<span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dp1</span><span class="params">(bagweight + <span class="number">1</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; weight.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> j = bagweight; j &gt;= weight[i]; j--) &#123;</span><br><span class="line">			<span class="type">int</span> we = j / weight[i];</span><br><span class="line">			dp1[j] = <span class="built_in">max</span>(dp1[j], dp1[j - weight[i]*we] + value[i] * we);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	cout &lt;&lt; dp1[bagweight] &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">test_weibagPromble2</span>();</span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">\\本人写的</span><br></pre></td></tr></table></figure>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test_weibagPromble2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	vector&lt;<span class="type">int</span>&gt; weight = &#123; <span class="number">1</span> , <span class="number">3</span> , <span class="number">4</span> &#125;;</span><br><span class="line">	vector&lt;<span class="type">int</span>&gt; value = &#123; <span class="number">15</span> , <span class="number">20</span>, <span class="number">30</span> &#125;;</span><br><span class="line">	<span class="type">int</span> bagweight = <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line">	<span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dp1</span><span class="params">(bagweight + <span class="number">1</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; weight.<span class="built_in">size</span>(); i++) &#123; </span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = weight[i]; j &lt;= bagweight; j++) &#123; </span><br><span class="line">            dp1[j] = <span class="built_in">max</span>(dp1[j], dp1[j - weight[i]] + value[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">	cout &lt;&lt; dp1[bagweight] &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">test_weibagPromble2</span>();</span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">\\代码随想录上的</span><br></pre></td></tr></table></figure>
<p>此题为[代码随想录].pdf上的一道完全背包题目，所以运行环境不在LeetCode上而是在VS studio上。<br>1.确定dp数组(dp table)以及下标的含义<br>完全背包跟之前的背包不同，之前的背包有物品数量限制，但是完全背包是没有物品数量限制，也就是说可以同样的物品可以重复叠加。虽然有所区别，但原理还是一样。dp[j]意为背包重量为j时的最大价值。<br>2.确认状态转移方程，即递推公式<br>dp[j]来源于上一个循环的dp[j]与j&gt;&#x3D;weight[i]时 dp[j - weight[i]] + value[i]。<br>3.dp数组如何初始化<br>背包初始价值全部为0即可。<br>4.遍历顺序的确定<br>之前我们限制物品数量时都是从后往前遍历的。现在没有了物品数量限制，直接从前往后遍历，从前往后遍历能使同样的物品放在重量为j的背包中重复叠加。<br>5.推导整个dp数组</p>
<h2 id="518-零钱兑换-II"><a href="#518-零钱兑换-II" class="headerlink" title="518.零钱兑换 II"></a>518.零钱兑换 II</h2><p>给你一个整数数组coins表示不同面额的硬币，另给一个整数amount表示总金额。请你计算并返回可以凑成总金额的硬币组合数。如果任何硬币组合都无法凑出总金额，返回0。假设每一种面额的硬币有无限个。 <br>题目数据保证结果符合32位带符号整数。</p>
<img src="/2022/05/15/record04/dpExample04.jpg" class="" title="这是一张图片">
<p>先贴出答案，然后一步步讲解。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">change</span><span class="params">(<span class="type">int</span> amount, vector&lt;<span class="type">int</span>&gt;&amp; coins)</span> </span>&#123;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dp</span><span class="params">(amount + <span class="number">1</span>,<span class="number">0</span>)</span></span>;</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; coins.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = coins[i];j &lt;= amount;j++)&#123;</span><br><span class="line">                dp[j] += dp[j - coins[i]];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[amount];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>1.确定dp数组(dp table)以及下标的含义<br>本题为完全背包+组合(组合不分排序)。amount看成背包重量，“硬币组合数”可以看成物品的组合数，所以拿之前的[完全背包]与[目标和]两题进行一个缝合。dp[j]为重量为j时，最大的排列数为dp[j]，<br>2.确认状态转移方程，即递推公式<br>dp[j] +&#x3D; dp[j - coins[i]];<br>3.dp数组如何初始化<br>dp[0]&#x3D;1<br>4.遍历顺序的确定<br>物品重量也就是组合数，从<br>5.推导整个dp数组</p>
<h2 id="377-组合总和-Ⅳ"><a href="#377-组合总和-Ⅳ" class="headerlink" title="377. 组合总和 Ⅳ"></a>377. 组合总和 Ⅳ</h2><p>给你一个由不同整数组成的数组nums，和一个目标整数target。请你从nums中找出并返回总和为target的元素组合的个数。<br>题目数据保证答案符合 32 位整数范围。</p>
<img src="/2022/05/15/record04/dpExample05.jpg" class="" title="这是一张图片">
<p>先贴出答案，然后一步步讲解。</p>
<figure class="highlight fortran"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> Solution &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">int</span> combinationSum4(vector&lt;<span class="built_in">int</span>&gt;&amp; nums, <span class="built_in">int</span> <span class="keyword">target</span>) &#123;</span><br><span class="line">        vector&lt;<span class="built_in">int</span>&gt; dp(<span class="keyword">target</span>+<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        for(<span class="built_in">int</span> i = <span class="number">0</span>;i &lt;= <span class="keyword">target</span>;i++)&#123;</span><br><span class="line">            for(<span class="built_in">int</span> j = <span class="number">0</span>;j &lt; nums.<span class="built_in">size</span>();j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(nums[j] &lt;= i &amp;&amp; dp[i] &lt; INT_MAX - dp[i - nums[j]])&#123;</span><br><span class="line">                    dp[i] += dp[i - nums[j]];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[<span class="keyword">target</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>1.确定dp数组(dp table)以及下标的含义<br>本题为完全背包+组合(组合分排序)。amount看成背包重量，“硬币组合数”可以看成物品的组合数，所以拿之前的[完全背包]与[目标和]两题进行一个缝合。dp[j]为重量为j时，最大的排列数为dp[j]，<br>2.确认状态转移方程，即递推公式<br>dp[j] +&#x3D; dp[j - coins[i]];<br>3.dp数组如何初始化<br>dp[0]&#x3D;1<br>4.遍历顺序的确定<br>如果求组合数就是外层for循环遍历物品，内层for遍历背包。<br>如果求排列数就是外层for遍历背包，内层for循环遍历物品。<br>5.推导整个dp数组</p>
<h2 id="70-爬楼梯-重制版"><a href="#70-爬楼梯-重制版" class="headerlink" title="70. 爬楼梯(重制版)"></a>70. 爬楼梯(重制版)</h2><p>假设你正在爬楼梯。需要 n 阶你才能到达楼顶。每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？</p>
<img src="/2022/05/15/record04/dpExample06.jpg" class="" title="这是一张图片">
<p>先贴出答案，然后一步步讲解。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">climbStairs</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(n == <span class="number">1</span>) <span class="keyword">return</span> n;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dp</span><span class="params">(n+<span class="number">1</span>,<span class="number">0</span>)</span></span>;</span><br><span class="line">        dp[<span class="number">1</span>]= <span class="number">1</span>;</span><br><span class="line">        dp[<span class="number">2</span>] = <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">3</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>;j &lt;= <span class="number">2</span>;j++)&#123;</span><br><span class="line">                dp[i] += dp[i-j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>OK~动态规划就学这么多，预计学到单词拆分就继续回到刷LeetCode题目。如果遇到新的算法就跟着[代码随想录].pdf刷算法专题(周末去的新区图书馆，但新区uu的特别招待，下午KTV晚上出去干饭- -，所以周一连忙补上学习内容T_T)。</p>
]]></content>
      <categories>
        <category>嵌入式</category>
        <category>c++</category>
      </categories>
      <tags>
        <tag>每周学习</tag>
        <tag>leetcode</tag>
        <tag>动态规划</tag>
      </tags>
  </entry>
  <entry>
    <title>Third learning record in May</title>
    <url>/2022/05/30/record05/</url>
    <content><![CDATA[<p>分享五月第三周学习内容</p>
<span id="more"></span>
<h1 id="动态规划入门学习"><a href="#动态规划入门学习" class="headerlink" title="动态规划入门学习"></a>动态规划入门学习</h1><p>动态规划：Dynamic Programming，简称DP，如果某⼀问题有很多重叠⼦问题，使⽤动态规划是最有效的。<br>步骤：<br>1.确定dp数组(dp table)以及下标的含义<br>2.确认状态转移方程，即递推公式<br>3.dp数组如何初始化<br>4.遍历顺序的确定<br>5.推导整个dp数组</p>
<h2 id="322-零钱兑换"><a href="#322-零钱兑换" class="headerlink" title="322. 零钱兑换"></a>322. 零钱兑换</h2><p>给你一个整数数组coins，表示不同面额的硬币；以及一个整数amount，表示总金额。计算并返回可以凑成总金额所需的最少的硬币个数。如果没有任何一种硬币组合能组成总金额，返回-1 。你可以认为每种硬币的数量是无限的。</p>
<img src="/2022/05/30/record05/dpExample01.jpg" class="" title="这是一张图片">
<p>先贴出答案，然后一步步讲解。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">coinChange</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; coins, <span class="type">int</span> amount)</span> </span>&#123;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dp</span><span class="params">(amount+<span class="number">1</span>,INT_MAX)</span></span>;</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= amount;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>;j &lt; coins.<span class="built_in">size</span>();j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(coins[j] &lt;= i &amp;&amp; dp[i - coins[j]] != INT_MAX) &#123;</span><br><span class="line">                    dp[i] = <span class="built_in">min</span>(dp[i],dp[i - coins[j]] + <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(dp[amount] == INT_MAX)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125; </span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> dp[amount];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>整体分析：<br>把不同面额的硬币视为物品，面额视为物品的重量，总金额amount视为背包重量。本题要求的是最少的银币个数，所以要求的不是“组合”个数，而是“物品个数”，因此并不是“组合”问题。而且每种硬币的数量是无限的，所以是“完全背包”问题。<br>1.确定dp数组(dp table)以及下标的含义<br>因为这里只有一个限制条件，即背包重量，所以dp肯定是一维。所以dp[i]的含义为：重量为i的背包能容纳最少的物品数量&lt;&#x3D;&gt;凑成总金额为i的最少银币个数。<br>2.确认状态转移方程，即递推公式<br>本题求的是最少的“物品个数”，所以dp[i] &#x3D; min(dp[i],dp[i - coins[j]] + 1)<br>3.dp数组如何初始化<br>首先dp[0] &#x3D; 0，因为面额为0个数也为0.但dp其他数字默认为0，那么在min(dp[i],dp[i - coins[j]] + 1)就一直为0，所以我们因把dp其他数字初始化为INT_MAX。<br>4.遍历顺序的确定<br>这题涉及的是完全背包的问题。完全背包的背包遍历顺序是从前往后遍历。物品由前往后遍历即可。<br>5.推导整个dp数组</p>
<h2 id="279-完全平方数"><a href="#279-完全平方数" class="headerlink" title="279. 完全平方数"></a>279. 完全平方数</h2><p>给你一个整数n，返回和为n的完全平方数的最少数量。完全平方数是一个整数，其值等于另一个整数的平方；换句话说，其值等于一个整数自乘的积。例如，1、4、9 和16都是完全平方数，而3和11不是。</p>
<img src="/2022/05/30/record05/dpExample02.jpg" class="" title="这是一张图片">
<p>先贴出答案，然后一步步讲解。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">numSquares</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dp</span><span class="params">(n + <span class="number">1</span>,INT_MAX)</span></span>;</span><br><span class="line">        dp[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i*i&lt;= n;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>;j &lt;= n;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(j - i*i &gt;= <span class="number">0</span>)&#123;</span><br><span class="line">                    dp[j] = <span class="built_in">min</span>(dp[j],dp[j-i*i] + <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>整体分析：<br>整数n视为背包最大重量为n，完全平方数为物品的重量，且不限制数量，因此为“完全背包”问题。<br>1.确定dp数组(dp table)以及下标的含义<br>因为这里只有一个限制条件，即背包重量，所以dp肯定是一维。所以dp[i]的含义为：重量为i的背包能容纳最少的物品数量&lt;&#x3D;&gt;整数i最少能划分完全平方数的个数。<br>2.确认状态转移方程，即递推公式<br>dp[j] &#x3D; min(dp[j],dp[j-i<em>i] + 1);<br>3.dp数组如何初始化<br>首先dp[0] &#x3D; 0，因为整数0最少能划分完全平方数的个数也为0.但dp其他数字默认为0，那么在min(dp[j],dp[j-i</em>i] + 1)就一直为0，所以我们因把dp其他数字初始化为INT_MAX。<br>4.遍历顺序的确定<br>这题涉及的是完全背包的问题。完全背包的背包遍历顺序是从前往后遍历。物品由前往后遍历即可。<br>5.推导整个dp数组</p>
<h2 id="139-单词拆分"><a href="#139-单词拆分" class="headerlink" title="139. 单词拆分"></a>139. 单词拆分</h2><p>给你一个字符串s和一个字符串列表wordDict作为字典。请你判断是否可以利用字典中出现的单词拼接出s。<br>注意：不要求字典中出现的单词全部都使用，并且字典中的单词可以重复使用。</p>
<img src="/2022/05/30/record05/dpExample03.jpg" class="" title="这是一张图片">
<p>先贴出答案，然后一步步讲解。</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    <span class="built_in">bool</span> word<span class="constructor">Break(<span class="params">string</span> <span class="params">s</span>, <span class="params">vector</span>&lt;<span class="params">string</span>&gt;&amp; <span class="params">wordDict</span>)</span> &#123;</span><br><span class="line">        unordered_set&lt;<span class="built_in">string</span>&gt; word<span class="constructor">Set(<span class="params">wordDict</span>.<span class="params">begin</span>()</span>, wordDict.<span class="keyword">end</span><span class="literal">()</span>);</span><br><span class="line">        <span class="built_in">int</span> m = s.length<span class="literal">()</span>;</span><br><span class="line">        vector&lt;<span class="built_in">bool</span>&gt; dp(m + <span class="number">1</span>,<span class="literal">false</span>);</span><br><span class="line">        dp<span class="literal">[<span class="number">0</span>]</span> = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="built_in">int</span> i = <span class="number">1</span>;i &lt;= m;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="built_in">int</span> j = <span class="number">0</span>;j &lt; i;j++)&#123;</span><br><span class="line">                <span class="built_in">string</span> word = s.substr( j , i - j );</span><br><span class="line">                <span class="keyword">if</span> (wordSet.find(word) != wordSet.<span class="keyword">end</span><span class="literal">()</span><span class="operator"> &amp;&amp; </span>dp<span class="literal">[<span class="identifier">j</span>]</span>) &#123;</span><br><span class="line">                    dp<span class="literal">[<span class="identifier">i</span>]</span> = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return dp<span class="literal">[<span class="identifier">m</span>]</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>整体分析：<br>字符串s为背包，字典里的字符串为物品。本题跟之前的题不同，以往的题要么求“最大重量”要么是“组合数量”，他们的“限制条件”我们直接无脑堆物品就完事了。但这题的“限制条件”不允许我们无脑堆物品，而是只允许“符合条件的物品”。“限制条件”比以前更严格，但思路依旧能用借鉴以前的题。假设整个字符串s为dp，背包从0开始，先搜索dp第一个字符，相当于dp里有两个指针，左指针j在0，右指针i在1，说明我们要确定从字典里的字符是否匹配得上指针j到i里的字符，指针里的字符数量逐渐递减，即左指针j右移。如果有匹配的字符，则右指针返回一个true。之和我们的左指针j在0，右指针i在2，判断字典里的字符是否匹配得上指针j到i里的字符，如果有匹配的字符，且左指针j是true即左指针j之前的字符串都能从字典里匹配到相应的字符串，则右指针返回一个true。<br>1.确定dp数组(dp table)以及下标的含义<br>dp类型为bool，dp[i]表示字符串前i个字符是否能匹配上。<br>2.确认状态转移方程，即递推公式<br>如果指针里的字符能匹配到字典里的字符且左指针为true，那么右指针为true。dp[i] &#x3D; true;<br>3.dp数组如何初始化<br>当字符串s啥也没有的时候，那一定为true。所以dp[0] &#x3D; true;其他都为false<br>4.遍历顺序的确定<br>因为字典里的字符串能重复使用，所以类似于“完全背包”问题，所以字典里的字符串从前往后遍历。<br>5.推导整个dp数组</p>
<h1 id="leetcode-热题HOT-100"><a href="#leetcode-热题HOT-100" class="headerlink" title="leetcode 热题HOT 100"></a>leetcode 热题HOT 100</h1><h2 id="10-正则表达式匹配"><a href="#10-正则表达式匹配" class="headerlink" title="10. 正则表达式匹配"></a>10. 正则表达式匹配</h2><p>给你一个字符串 s 和一个字符规律 p，请你来实现一个支持 ‘.’ 和 ‘<em>‘ 的正则表达式匹配。<br>‘.’ 匹配任意单个字符<br>‘</em>‘ 匹配零个或多个前面的那一个元素<br>所谓匹配，是要涵盖 整个 字符串 s的，而不是部分字符串。</p>
<img src="/2022/05/30/record05/example01.jpg" class="" title="这是一张图片">

<p>先贴出答案，然后一步步讲解。</p>
<figure class="highlight prolog"><table><tr><td class="code"><pre><span class="line">class <span class="symbol">Solution</span> &#123;</span><br><span class="line">public:</span><br><span class="line">    bool isMatch(string s, string p) &#123;</span><br><span class="line">        int m = s.length();</span><br><span class="line">        int n = p.length();</span><br><span class="line">        s.insert(s.begin(),<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">        p.insert(p.begin(),<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">        vector&lt;vector&lt;bool&gt;&gt; dp(m + <span class="number">1</span>,vector&lt;bool&gt;(n + <span class="number">1</span>,false));</span><br><span class="line"></span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>] = true;</span><br><span class="line"></span><br><span class="line">        for(int j = <span class="number">1</span>;j &lt;= n;j++)&#123;</span><br><span class="line">            if(p[j] == <span class="string">&#x27;*&#x27;</span>)&#123;</span><br><span class="line">                dp[<span class="number">0</span>][j] = dp[<span class="number">0</span>][j<span class="number">-1</span>];</span><br><span class="line">            &#125;else if(j + <span class="number">1</span> &gt; n || p[j + <span class="number">1</span>] != <span class="string">&#x27;*&#x27;</span>)&#123;</span><br><span class="line">                break;</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                dp[<span class="number">0</span>][j] = true;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        for(int i = <span class="number">1</span>;i &lt;= m;i++)&#123;</span><br><span class="line">            for(int j = <span class="number">1</span>;j &lt;= n;j++)&#123;</span><br><span class="line">                if(p[j] == <span class="string">&#x27;*&#x27;</span>)&#123;</span><br><span class="line">                    dp[i][j] = dp[i][j - <span class="number">1</span>];</span><br><span class="line">                    continue;</span><br><span class="line">                &#125;</span><br><span class="line">                if(j + <span class="number">1</span> &lt;= n &amp;&amp; p[j + <span class="number">1</span>] == <span class="string">&#x27;*&#x27;</span>)&#123;</span><br><span class="line">                    dp[i][j] = dp[i][j - <span class="number">1</span>]</span><br><span class="line">                     || (dp[i - <span class="number">1</span>][j - <span class="number">1</span>] &amp;&amp; (p[j] == <span class="string">&#x27;.&#x27;</span> || s[i] == p[j]))</span><br><span class="line">                     || (dp[i - <span class="number">1</span>][j] &amp;&amp; (p[j] == <span class="string">&#x27;.&#x27;</span> || s[i] == p[j]));</span><br><span class="line">                &#125;else&#123;</span><br><span class="line">                    dp[i][j] = dp[i - <span class="number">1</span>][j - <span class="number">1</span>] &amp;&amp; (p[j] == <span class="string">&#x27;.&#x27;</span> || s[i] == p[j]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return dp[m][n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>这题运用到了动态规划的知识。首先对整体进行分析：<br>一个字符串 s 与一个字符规律 p 相匹配，我们首先在s和p字符最前面添加一个‘0’字符，为了之后能很好的描述此题。比如s第i个字符不再是s[i - 1]而是s[i]。</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    <span class="built_in">bool</span> is<span class="constructor">Match(<span class="params">string</span> <span class="params">s</span>, <span class="params">string</span> <span class="params">p</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">int</span> m = s.length<span class="literal">()</span>;</span><br><span class="line">        <span class="built_in">int</span> n = p.length<span class="literal">()</span>;</span><br><span class="line">        s.insert(s.<span class="keyword">begin</span><span class="literal">()</span>,<span class="character">&#x27;0&#x27;</span>);</span><br><span class="line">        p.insert(p.<span class="keyword">begin</span><span class="literal">()</span>,<span class="character">&#x27;0&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>如果s选取前i个字符能与p前j个字符相匹配，而且本题的函数类型为bool。于是我们可以令dp[i][j]为：s前i个字符能与p前j个字符相匹配。我们把框架写下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isMatch</span><span class="params">(string s, string p)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> m = s.<span class="built_in">length</span>();</span><br><span class="line">        <span class="type">int</span> n = p.<span class="built_in">length</span>();</span><br><span class="line">        s.<span class="built_in">insert</span>(s.<span class="built_in">begin</span>(),<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">        p.<span class="built_in">insert</span>(p.<span class="built_in">begin</span>(),<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">        vector&lt;vector&lt;<span class="type">bool</span>&gt;&gt; <span class="built_in">dp</span>(m + <span class="number">1</span>,<span class="built_in">vector</span>&lt;<span class="type">bool</span>&gt;(n + <span class="number">1</span>,<span class="literal">false</span>));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> dp[m][n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>接下来讨论状态方程。<br>先理解题意。“ ‘*’ 匹配零个或多个前面的那一个元素 ”说明 *跟前面一个字符是绑定在一起，比如a *,要么是0个a，要么是1个a，要么是好几个a。因为当我们讨论s前i个字符能与否p前j个字符相匹配时，还得看p的第j+1字符是否为’ * ‘。不考虑’.’。<br>当p的第j个字符为英文小写，先判断p的第j+1字符是否为’ * ‘。如果不是或者是超过字符串p的最长长度，说明p的第j个字符是独立的，不与第j+1字符绑定。我们想判断dp[i][j]是否为true，只需判断s的第i个字符与p的第j个字符相等以及之前的字符能匹配得上，这里就发生了“状态转移”。</p>
<figure class="highlight prolog"><table><tr><td class="code"><pre><span class="line">if(j + <span class="number">1</span> &gt; n || p[j + <span class="number">1</span>] != <span class="string">&#x27;*&#x27;</span>)&#123;</span><br><span class="line">    dp[i][j] = dp[i - <span class="number">1</span>][j - <span class="number">1</span>] &amp;&amp; ( s[i] == p[j]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>当p的第j个字符为英文小写，且p的第j+1字符为’ * ‘。说明p的第j个字符与第j+1字符是绑定在一起的，于是我们把第j个字符与第j+1个字符看成一个整体A。所以这里分三种情况，这个整体A视为没有第j字符、一个第j字符和多个第j字符。<br>当s的第i个字符不等于p的第j个字符时，如要满足题意，这个整体A需视为没有第j字符。即</p>
<figure class="highlight prolog"><table><tr><td class="code"><pre><span class="line">if(j + <span class="number">1</span> &lt;= n &amp;&amp; p[j + <span class="number">1</span>] == <span class="string">&#x27;*&#x27;</span>)&#123;</span><br><span class="line">    dp[i][j] = dp[i][j - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>当s的第i个字符等于p的第j个字符时，且s的第i个字符与相邻的字符不重复，整体A视为一个第j字符，即</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">if</span><span class="params">(j + <span class="number">1</span> &lt;= n &amp;&amp; p[j + <span class="number">1</span>] == <span class="string">&#x27;*&#x27;</span>)</span></span>&#123;</span><br><span class="line">    dp<span class="selector-attr">[i]</span><span class="selector-attr">[j]</span> = dp<span class="selector-attr">[i - 1]</span><span class="selector-attr">[j - 1]</span> &amp;&amp; (s<span class="selector-attr">[i]</span> == <span class="selector-tag">p</span><span class="selector-attr">[j]</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>当s的第i个字符等于p的第j个字符时，且s的第i个字符与相邻的字符有重复，整体A视为多第j字符，即</p>
<figure class="highlight prolog"><table><tr><td class="code"><pre><span class="line">if(j + <span class="number">1</span> &lt;= n &amp;&amp; p[j + <span class="number">1</span>] == <span class="string">&#x27;*&#x27;</span>)&#123;</span><br><span class="line">    dp[i][j] = dp[i - <span class="number">1</span>][j] &amp;&amp; (s[i] == p[j]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>当p的第j个字符为’ * ‘。因为’ * ‘都会跟前一个字符绑定，所以当前状态因与第j-1字符状态一样。即</p>
<figure class="highlight prolog"><table><tr><td class="code"><pre><span class="line">if(p[j] == <span class="string">&#x27;*&#x27;</span>)&#123;</span><br><span class="line">    dp[i][j] = dp[i][j - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>考虑’.’的情况。只要出现’.’，就相当于“s[i] &#x3D;&#x3D; p[j]”。所以在之前的状态转移补充一个或条件即可。</p>
<figure class="highlight prolog"><table><tr><td class="code"><pre><span class="line">class <span class="symbol">Solution</span> &#123;</span><br><span class="line">public:</span><br><span class="line">    bool isMatch(string s, string p) &#123;</span><br><span class="line">        int m = s.length();</span><br><span class="line">        int n = p.length();</span><br><span class="line">        s.insert(s.begin(),<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">        p.insert(p.begin(),<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">        vector&lt;vector&lt;bool&gt;&gt; dp(m + <span class="number">1</span>,vector&lt;bool&gt;(n + <span class="number">1</span>,false));</span><br><span class="line"></span><br><span class="line">        for(int i = <span class="number">1</span>;i &lt;= m;i++)&#123;</span><br><span class="line">            for(int j = <span class="number">1</span>;j &lt;= n;j++)&#123;</span><br><span class="line">                if(p[j] == <span class="string">&#x27;*&#x27;</span>)&#123;</span><br><span class="line">                    dp[i][j] = dp[i][j - <span class="number">1</span>];</span><br><span class="line">                    continue;</span><br><span class="line">                &#125;</span><br><span class="line">                if(j + <span class="number">1</span> &lt;= n &amp;&amp; p[j + <span class="number">1</span>] == <span class="string">&#x27;*&#x27;</span>)&#123;</span><br><span class="line">                    dp[i][j] = dp[i][j - <span class="number">1</span>]</span><br><span class="line">                     || (dp[i - <span class="number">1</span>][j - <span class="number">1</span>] &amp;&amp; (p[j] == <span class="string">&#x27;.&#x27;</span> || s[i] == p[j]))</span><br><span class="line">                     || (dp[i - <span class="number">1</span>][j] &amp;&amp; (p[j] == <span class="string">&#x27;.&#x27;</span> || s[i] == p[j]));</span><br><span class="line">                &#125;else&#123;</span><br><span class="line">                    dp[i][j] = dp[i - <span class="number">1</span>][j - <span class="number">1</span>] &amp;&amp; (p[j] == <span class="string">&#x27;.&#x27;</span> || s[i] == p[j]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return dp[m][n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>接下来讨论初始化问题。<br>首先当s的第0个字符与p的第0个字符毫无疑问是相同的。所以dp[0][0]&#x3D;true。另外得考虑一个极端情况，比如s字符串为空串，而p字符和a* b* c<em>，因为a</em>可以视为空串，所以这种情况也是符合的。所以</p>
<figure class="highlight prolog"><table><tr><td class="code"><pre><span class="line">class <span class="symbol">Solution</span> &#123;</span><br><span class="line">public:</span><br><span class="line">    bool isMatch(string s, string p) &#123;</span><br><span class="line">        int m = s.length();</span><br><span class="line">        int n = p.length();</span><br><span class="line">        s.insert(s.begin(),<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">        p.insert(p.begin(),<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">        vector&lt;vector&lt;bool&gt;&gt; dp(m + <span class="number">1</span>,vector&lt;bool&gt;(n + <span class="number">1</span>,false));</span><br><span class="line"></span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>] = true;</span><br><span class="line"></span><br><span class="line">        for(int j = <span class="number">1</span>;j &lt;= n;j++)&#123;</span><br><span class="line">            if(p[j] == <span class="string">&#x27;*&#x27;</span>)&#123;</span><br><span class="line">                dp[<span class="number">0</span>][j] = dp[<span class="number">0</span>][j<span class="number">-1</span>];</span><br><span class="line">            &#125;else if(j + <span class="number">1</span> &gt; n || p[j + <span class="number">1</span>] != <span class="string">&#x27;*&#x27;</span>)&#123;</span><br><span class="line">                break;</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                dp[<span class="number">0</span>][j] = true;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        for(int i = <span class="number">1</span>;i &lt;= m;i++)&#123;</span><br><span class="line">            for(int j = <span class="number">1</span>;j &lt;= n;j++)&#123;</span><br><span class="line">                if(p[j] == <span class="string">&#x27;*&#x27;</span>)&#123;</span><br><span class="line">                    dp[i][j] = dp[i][j - <span class="number">1</span>];</span><br><span class="line">                    continue;</span><br><span class="line">                &#125;</span><br><span class="line">                if(j + <span class="number">1</span> &lt;= n &amp;&amp; p[j + <span class="number">1</span>] == <span class="string">&#x27;*&#x27;</span>)&#123;</span><br><span class="line">                    dp[i][j] = dp[i][j - <span class="number">1</span>]</span><br><span class="line">                     || (dp[i - <span class="number">1</span>][j - <span class="number">1</span>] &amp;&amp; (p[j] == <span class="string">&#x27;.&#x27;</span> || s[i] == p[j]))</span><br><span class="line">                     || (dp[i - <span class="number">1</span>][j] &amp;&amp; (p[j] == <span class="string">&#x27;.&#x27;</span> || s[i] == p[j]));</span><br><span class="line">                &#125;else&#123;</span><br><span class="line">                    dp[i][j] = dp[i - <span class="number">1</span>][j - <span class="number">1</span>] &amp;&amp; (p[j] == <span class="string">&#x27;.&#x27;</span> || s[i] == p[j]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return dp[m][n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>


<h1 id="二叉树入门学习"><a href="#二叉树入门学习" class="headerlink" title="二叉树入门学习"></a>二叉树入门学习</h1><p>一棵树是一些节点(node)的集合。可以为空集，如果不是空集，则树由根节点以及0个或多个子树组成，根节点没有前驱结点。</p>
<img src="/2022/05/30/record05/bt01.jpg" class="" title="这是一张图片">
<p>图中根节点就是没有父结点的结点，叶子结点就是没有子节点的结点。</p>
<img src="/2022/05/30/record05/bt02.jpg" class="" title="这是一张图片">
<p>下面介绍一些与树相关的概念（以上面的树为例）：<br>（1）结点的度：一个节点含有的子树的个数称为该节点的度；如上图：A的为6，即B、C、D、E、F、G。<br>（2）叶结点：度为0的节点称为叶结点；如上图：B、C、H、I…等为叶结点。<br>（3）双亲结点或父结点：若一个节点含有子结点，则这个结点称为其子结点的父结点；如上图：A是B的父结点。<br>（4）孩子结点或子结点：一个结点含有的子树的根结点称为该结点的子结点；如上图：B是A的孩子节点。<br>（5）兄弟结点：具有相同父结点的结点互称为兄弟结点； 如上图：B、C是兄弟结点。<br>（6）树的度：一棵树中，最大的节点的度称为树的度； 如上图：树的度为6。<br>（7）结点的层次：从根开始定义起，根为第1层，根的子结点为第2层，以此类推。<br>（8）树的高度或深度：树中结点的最大层次； 如上图：树的高度为4。<br>（9）节点的祖先：从根到某一结点所经分支上的所有结点；如上图：D、A是H的祖先；A是所有结点的公共祖先。<br>（10）子孙：以某节点为根的子树中任一节点都称为该节点的子孙。如上图：所有节点都是A的子孙。<br>（11）森林：多棵互不相交的树的集合称为森林。</p>
<p>二叉树的储存方式为链式存储。</p>
<img src="/2022/05/30/record05/bt03.jpg" class="" title="这是一张图片">
<p>因此代码可编写为：</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> TreeNode &#123;</span><br><span class="line">    <span class="built_in">int</span> <span class="keyword">val</span>;</span><br><span class="line">    TreeNode *left;</span><br><span class="line">    TreeNode *right;</span><br><span class="line">    <span class="constructor">TreeNode(<span class="params">int</span> <span class="params">x</span>)</span> : <span class="keyword">val</span>(x), left(NULL), right(NULL) &#123;&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>比如我们想创建如下图这样的一棵树</p>
<img src="/2022/05/30/record05/bt04.jpg" class="" title="这是一张图片">
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">#<span class="keyword">include</span>&lt;stdio.h&gt;</span><br><span class="line">#<span class="keyword">include</span>&lt;stdlib.h&gt;</span><br><span class="line"><span class="keyword">struct</span> treeNode &#123;       <span class="comment">//树的结点</span></span><br><span class="line">	<span class="built_in">char</span> data;           <span class="comment">//保存数据</span></span><br><span class="line">	treeNode *left;     <span class="comment">//左子树</span></span><br><span class="line">	treeNode *right;    <span class="comment">//右子树</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//1.创建树</span></span><br><span class="line"><span class="keyword">struct</span> treeNode* create<span class="constructor">Node(<span class="params">char</span> <span class="params">data</span>)</span> &#123;</span><br><span class="line">	<span class="keyword">struct</span> treeNode* newNode = (<span class="keyword">struct</span> treeNode*)malloc(sizeof(<span class="keyword">struct</span> treeNode));</span><br><span class="line">	newNode-&gt;data = data;</span><br><span class="line">	newNode-&gt;left = NULL;</span><br><span class="line">	newNode-&gt;right = NULL;</span><br><span class="line">	return newNode;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.连接结点</span></span><br><span class="line">void insert<span class="constructor">Node(<span class="params">struct</span> <span class="params">treeNode</span><span class="operator">*</span> <span class="params">curNode</span>, <span class="params">struct</span> <span class="params">treeNode</span><span class="operator">*</span> <span class="params">leftNode</span>, <span class="params">struct</span> <span class="params">treeNode</span><span class="operator">*</span> <span class="params">rightNode</span>)</span> &#123;</span><br><span class="line">	curNode-&gt;left = leftNode;</span><br><span class="line">	curNode-&gt;right = rightNode;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//3.递归中序遍历</span></span><br><span class="line">void print<span class="constructor">Data(<span class="params">struct</span> <span class="params">treeNode</span><span class="operator">*</span> <span class="params">curNode</span>)</span> &#123;</span><br><span class="line">	printf(<span class="string">&quot;%c&quot;</span>, curNode-&gt;data);</span><br><span class="line">&#125;</span><br><span class="line">void mid<span class="constructor">Order(<span class="params">struct</span> <span class="params">treeNode</span><span class="operator">*</span> <span class="params">tree</span>)</span> &#123;</span><br><span class="line">	<span class="keyword">if</span> (tree != NULL) &#123;</span><br><span class="line">		mid<span class="constructor">Order(<span class="params">tree</span>-&gt;<span class="params">left</span>)</span>;	<span class="comment">//左</span></span><br><span class="line">		print<span class="constructor">Data(<span class="params">tree</span>)</span>;		<span class="comment">//根</span></span><br><span class="line">		mid<span class="constructor">Order(<span class="params">tree</span>-&gt;<span class="params">right</span>)</span>;	<span class="comment">//右</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//4.递归前序遍历</span></span><br><span class="line">void pre<span class="constructor">Order(<span class="params">struct</span> <span class="params">treeNode</span><span class="operator">*</span> <span class="params">tree</span>)</span> &#123;</span><br><span class="line">	<span class="keyword">if</span> (tree != NULL) &#123;</span><br><span class="line">		print<span class="constructor">Data(<span class="params">tree</span>)</span>;		<span class="comment">//根</span></span><br><span class="line">		pre<span class="constructor">Order(<span class="params">tree</span>-&gt;<span class="params">left</span>)</span>;	<span class="comment">//左</span></span><br><span class="line">		pre<span class="constructor">Order(<span class="params">tree</span>-&gt;<span class="params">right</span>)</span>;	<span class="comment">//右</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//5.递归后序遍历</span></span><br><span class="line">void last<span class="constructor">Order(<span class="params">struct</span> <span class="params">treeNode</span><span class="operator">*</span> <span class="params">tree</span>)</span> &#123;</span><br><span class="line">	<span class="keyword">if</span> (tree != NULL) &#123;</span><br><span class="line">		last<span class="constructor">Order(<span class="params">tree</span>-&gt;<span class="params">left</span>)</span>;	<span class="comment">//左</span></span><br><span class="line">		last<span class="constructor">Order(<span class="params">tree</span>-&gt;<span class="params">right</span>)</span>;	<span class="comment">//右</span></span><br><span class="line">		print<span class="constructor">Data(<span class="params">tree</span>)</span>;		<span class="comment">//根</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//6.非遍历的方式</span></span><br><span class="line">void mid<span class="constructor">OrderByStact(<span class="params">struct</span> <span class="params">treeNode</span><span class="operator">*</span> <span class="params">tree</span>)</span> &#123;</span><br><span class="line">	<span class="keyword">if</span> (tree<span class="operator"> == </span>NULL) &#123;</span><br><span class="line">		return;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">struct</span> treeNode* stack<span class="literal">[<span class="number">10</span>]</span>;</span><br><span class="line">	<span class="built_in">int</span> stackTop = -<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">struct</span> treeNode* pMove = tree;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span> (stackTop != -<span class="number">1</span><span class="operator"> || </span>pMove != NULL) &#123;</span><br><span class="line">		<span class="keyword">while</span> (pMove != NULL) &#123;</span><br><span class="line">			stack<span class="literal">[<span class="operator">++</span><span class="identifier">stackTop</span>]</span> = pMove;</span><br><span class="line">			pMove = pMove-&gt;left;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (stackTop != -<span class="number">1</span>) &#123;</span><br><span class="line">			pMove = stack<span class="literal">[<span class="identifier">stackTop</span>--]</span>;</span><br><span class="line">			printf(<span class="string">&quot;%c\t&quot;</span>, pMove-&gt;data);</span><br><span class="line">			pMove = pMove-&gt;right;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">int</span> main<span class="literal">()</span> &#123;</span><br><span class="line">	<span class="comment">//1.创建所有的结点</span></span><br><span class="line">	<span class="keyword">struct</span> treeNode* A = create<span class="constructor">Node(&#x27;A&#x27;)</span>;</span><br><span class="line">	<span class="keyword">struct</span> treeNode* B = create<span class="constructor">Node(&#x27;B&#x27;)</span>;</span><br><span class="line">	<span class="keyword">struct</span> treeNode* C = create<span class="constructor">Node(&#x27;C&#x27;)</span>;</span><br><span class="line">	<span class="keyword">struct</span> treeNode* D = create<span class="constructor">Node(&#x27;D&#x27;)</span>;</span><br><span class="line">	<span class="keyword">struct</span> treeNode* E = create<span class="constructor">Node(&#x27;E&#x27;)</span>;</span><br><span class="line">	<span class="keyword">struct</span> treeNode* F = create<span class="constructor">Node(&#x27;F&#x27;)</span>;</span><br><span class="line">	<span class="keyword">struct</span> treeNode* G = create<span class="constructor">Node(&#x27;G&#x27;)</span>;</span><br><span class="line">	<span class="keyword">struct</span> treeNode* K = create<span class="constructor">Node(&#x27;K&#x27;)</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//做连接操作</span></span><br><span class="line">	insert<span class="constructor">Node(A, B, C)</span>;</span><br><span class="line">	insert<span class="constructor">Node(B, D, E)</span>;</span><br><span class="line">	insert<span class="constructor">Node(C, F, G)</span>;</span><br><span class="line">	insert<span class="constructor">Node(F, NULL, K)</span>;</span><br><span class="line">	mid<span class="constructor">Order(A)</span>;</span><br><span class="line">	printf(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">	last<span class="constructor">Order(A)</span>;</span><br><span class="line">	printf(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">	pre<span class="constructor">Order(A)</span>;</span><br><span class="line">	printf(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">	mid<span class="constructor">OrderByStact(A)</span>;</span><br><span class="line">	printf(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">	return <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>接下来对此树进行遍历。遍历顺序分为前序遍历、中序遍历和后序遍历。<br>前序遍历： 中 左 右<br>中序遍历： 左 中 右<br>后序遍历： 左 右 中<br>对于上题来说<br>前序遍历： ABDECFKG<br>中序遍历： DBEAFKCG<br>后序遍历： DEBKFGCA<br>3、4、5用了递归的思想。<br>6非遍历的方式用了栈的思路，即先进后出。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">midOrderByStact</span><span class="params">(<span class="keyword">struct</span> treeNode* tree)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (tree == <span class="literal">NULL</span>) &#123;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125; <span class="comment">//先判断是否是空树</span></span><br><span class="line">	<span class="keyword">struct</span> <span class="title class_">treeNode</span>* stack[<span class="number">10</span>]; <span class="comment">//初始化一个栈</span></span><br><span class="line">	<span class="type">int</span> stackTop = <span class="number">-1</span>; <span class="comment">//入栈一个元素</span></span><br><span class="line">	<span class="keyword">struct</span> <span class="title class_">treeNode</span>* pMove = tree; <span class="comment">//定义一个指针，初始指向树的根节点</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span> (stackTop != <span class="number">-1</span> || pMove != <span class="literal">NULL</span>) &#123;</span><br><span class="line">		<span class="keyword">while</span> (pMove != <span class="literal">NULL</span>) &#123;</span><br><span class="line">			stack[++stackTop] = pMove;</span><br><span class="line">			pMove = pMove-&gt;left;</span><br><span class="line">		&#125; <span class="comment">//遍历到树的最左边</span></span><br><span class="line">		<span class="keyword">if</span> (stackTop != <span class="number">-1</span>) &#123;</span><br><span class="line">			pMove = stack[stackTop--];</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%c\t&quot;</span>, pMove-&gt;data); <span class="comment">//输出pMove指向的结点数据</span></span><br><span class="line">			pMove = pMove-&gt;right;   <span class="comment">//遍历右边</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="144-二叉树的前序遍历"><a href="#144-二叉树的前序遍历" class="headerlink" title="144. 二叉树的前序遍历"></a>144. 二叉树的前序遍历</h2><p>给你二叉树的根节点 root ，返回它节点值的前序遍历。</p>
<img src="/2022/05/30/record05/btExample01.jpg" class="" title="这是一张图片">
<figure class="highlight coq"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * <span class="keyword">Definition</span> <span class="keyword">for</span> a binary tree node.</span><br><span class="line"> * struct TreeNode &#123;</span><br><span class="line"> *     int val;</span><br><span class="line"> *     TreeNode *<span class="built_in">left</span>;</span><br><span class="line"> *     TreeNode *<span class="built_in">right</span>;</span><br><span class="line"> *     TreeNode() : val(<span class="number">0</span>), <span class="built_in">left</span>(nullptr), <span class="built_in">right</span>(nullptr) &#123;&#125;</span><br><span class="line"> *     TreeNode(int x) : val(x), <span class="built_in">left</span>(nullptr), <span class="built_in">right</span>(nullptr) &#123;&#125;</span><br><span class="line"> *     TreeNode(int x, TreeNode *<span class="built_in">left</span>, TreeNode *<span class="built_in">right</span>) : val(x), <span class="built_in">left</span>(<span class="built_in">left</span>), <span class="built_in">right</span>(<span class="built_in">right</span>) &#123;&#125;</span><br><span class="line"> * &#125;;</span><br><span class="line"> */</span><br><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    vector&lt;int&gt; preorderTraversal(TreeNode* root) &#123;</span><br><span class="line">        vector&lt;int&gt; result;</span><br><span class="line">        traversal(root,result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    void traversal(TreeNode* node,vector&lt;int&gt;&amp; vec)&#123;</span><br><span class="line">        <span class="keyword">if</span>(node == NULL)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        vec.push_back(node-&gt;val);</span><br><span class="line">        traversal(node-&gt;<span class="built_in">left</span>,vec);</span><br><span class="line">        traversal(node-&gt;<span class="built_in">right</span>,vec);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="145-二叉树的后序遍历"><a href="#145-二叉树的后序遍历" class="headerlink" title="145. 二叉树的后序遍历"></a>145. 二叉树的后序遍历</h2><p>给你二叉树的根节点 root ，返回它节点值的后序遍历。</p>
<img src="/2022/05/30/record05/btExample02.jpg" class="" title="这是一张图片">
<figure class="highlight coq"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * <span class="keyword">Definition</span> <span class="keyword">for</span> a binary tree node.</span><br><span class="line"> * struct TreeNode &#123;</span><br><span class="line"> *     int val;</span><br><span class="line"> *     TreeNode *<span class="built_in">left</span>;</span><br><span class="line"> *     TreeNode *<span class="built_in">right</span>;</span><br><span class="line"> *     TreeNode() : val(<span class="number">0</span>), <span class="built_in">left</span>(nullptr), <span class="built_in">right</span>(nullptr) &#123;&#125;</span><br><span class="line"> *     TreeNode(int x) : val(x), <span class="built_in">left</span>(nullptr), <span class="built_in">right</span>(nullptr) &#123;&#125;</span><br><span class="line"> *     TreeNode(int x, TreeNode *<span class="built_in">left</span>, TreeNode *<span class="built_in">right</span>) : val(x), <span class="built_in">left</span>(<span class="built_in">left</span>), <span class="built_in">right</span>(<span class="built_in">right</span>) &#123;&#125;</span><br><span class="line"> * &#125;;</span><br><span class="line"> */</span><br><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    vector&lt;int&gt; postorderTraversal(TreeNode* root) &#123;</span><br><span class="line">        vector&lt;int&gt; vec;</span><br><span class="line">        traversal(root,vec);</span><br><span class="line">        <span class="keyword">return</span> vec;</span><br><span class="line">    &#125;</span><br><span class="line">    void traversal(TreeNode* node,vector&lt;int&gt;&amp; vec)&#123;</span><br><span class="line">        <span class="keyword">if</span>(node == NULL)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        traversal(node-&gt;<span class="built_in">left</span>,vec);</span><br><span class="line">        traversal(node-&gt;<span class="built_in">right</span>,vec);</span><br><span class="line">        vec.push_back(node-&gt;val);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="94-二叉树的中序遍历"><a href="#94-二叉树的中序遍历" class="headerlink" title="94. 二叉树的中序遍历"></a>94. 二叉树的中序遍历</h2><p>给你二叉树的根节点 root ，返回它节点值的中序遍历。</p>
<img src="/2022/05/30/record05/btExample03.jpg" class="" title="这是一张图片">
<figure class="highlight coq"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * <span class="keyword">Definition</span> <span class="keyword">for</span> a binary tree node.</span><br><span class="line"> * struct TreeNode &#123;</span><br><span class="line"> *     int val;</span><br><span class="line"> *     TreeNode *<span class="built_in">left</span>;</span><br><span class="line"> *     TreeNode *<span class="built_in">right</span>;</span><br><span class="line"> *     TreeNode() : val(<span class="number">0</span>), <span class="built_in">left</span>(nullptr), <span class="built_in">right</span>(nullptr) &#123;&#125;</span><br><span class="line"> *     TreeNode(int x) : val(x), <span class="built_in">left</span>(nullptr), <span class="built_in">right</span>(nullptr) &#123;&#125;</span><br><span class="line"> *     TreeNode(int x, TreeNode *<span class="built_in">left</span>, TreeNode *<span class="built_in">right</span>) : val(x), <span class="built_in">left</span>(<span class="built_in">left</span>), <span class="built_in">right</span>(<span class="built_in">right</span>) &#123;&#125;</span><br><span class="line"> * &#125;;</span><br><span class="line"> */</span><br><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    vector&lt;int&gt; inorderTraversal(TreeNode* root) &#123;</span><br><span class="line">        vector&lt;int&gt; vec;</span><br><span class="line">        traversal(root,vec);</span><br><span class="line">        <span class="keyword">return</span> vec;</span><br><span class="line">    &#125;</span><br><span class="line">    void traversal(TreeNode* root,vector&lt;int&gt;&amp; vec)&#123;</span><br><span class="line">        <span class="keyword">if</span>( root == NULL)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        traversal(root-&gt;<span class="built_in">left</span>,vec);</span><br><span class="line">        vec.push_back(root-&gt;val);</span><br><span class="line">        traversal(root-&gt;<span class="built_in">right</span>,vec);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>嵌入式</category>
        <category>c++</category>
      </categories>
      <tags>
        <tag>每周学习</tag>
        <tag>leetcode</tag>
        <tag>动态规划</tag>
        <tag>二叉树</tag>
      </tags>
  </entry>
  <entry>
    <title>First learning record in June</title>
    <url>/2022/06/05/record06/</url>
    <content><![CDATA[<p>分享六月第一周学习内容</p>
<span id="more"></span>
<h1 id="二叉树入门学习"><a href="#二叉树入门学习" class="headerlink" title="二叉树入门学习"></a>二叉树入门学习</h1><h2 id="144-二叉树的前序遍历"><a href="#144-二叉树的前序遍历" class="headerlink" title="144. 二叉树的前序遍历"></a>144. 二叉树的前序遍历</h2><p>给你二叉树的根节点 root ，返回它节点值的前序遍历。</p>
<img src="/2022/06/05/record06/btExample01.jpg" class="" title="这是一张图片">
<figure class="highlight coq"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * <span class="keyword">Definition</span> <span class="keyword">for</span> a binary tree node.</span><br><span class="line"> * struct TreeNode &#123;</span><br><span class="line"> *     int val;</span><br><span class="line"> *     TreeNode *<span class="built_in">left</span>;</span><br><span class="line"> *     TreeNode *<span class="built_in">right</span>;</span><br><span class="line"> *     TreeNode() : val(<span class="number">0</span>), <span class="built_in">left</span>(nullptr), <span class="built_in">right</span>(nullptr) &#123;&#125;</span><br><span class="line"> *     TreeNode(int x) : val(x), <span class="built_in">left</span>(nullptr), <span class="built_in">right</span>(nullptr) &#123;&#125;</span><br><span class="line"> *     TreeNode(int x, TreeNode *<span class="built_in">left</span>, TreeNode *<span class="built_in">right</span>) : val(x), <span class="built_in">left</span>(<span class="built_in">left</span>), <span class="built_in">right</span>(<span class="built_in">right</span>) &#123;&#125;</span><br><span class="line"> * &#125;;</span><br><span class="line"> */</span><br><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    vector&lt;int&gt; preorderTraversal(TreeNode* root) &#123;</span><br><span class="line">        stack&lt;TreeNode*&gt; st;</span><br><span class="line">        vector&lt;int&gt; result;</span><br><span class="line">        <span class="keyword">if</span>(root == NULL)&#123;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">        st.push(root);</span><br><span class="line">        while(!st.empty())&#123;</span><br><span class="line">            TreeNode* node = st.<span class="built_in">top</span>();</span><br><span class="line">            st.pop();</span><br><span class="line">            result.push_back(node -&gt; val);</span><br><span class="line">            <span class="keyword">if</span>(node-&gt;<span class="built_in">right</span>) st.push(node-&gt;<span class="built_in">right</span>);</span><br><span class="line">            <span class="keyword">if</span>(node-&gt;<span class="built_in">left</span>) st.push(node-&gt;<span class="built_in">left</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="145-二叉树的后序遍历"><a href="#145-二叉树的后序遍历" class="headerlink" title="145. 二叉树的后序遍历"></a>145. 二叉树的后序遍历</h2><p>给你二叉树的根节点 root ，返回它节点值的后序遍历。</p>
<img src="/2022/06/05/record06/btExample02.jpg" class="" title="这是一张图片">
<figure class="highlight coq"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * <span class="keyword">Definition</span> <span class="keyword">for</span> a binary tree node.</span><br><span class="line"> * struct TreeNode &#123;</span><br><span class="line"> *     int val;</span><br><span class="line"> *     TreeNode *<span class="built_in">left</span>;</span><br><span class="line"> *     TreeNode *<span class="built_in">right</span>;</span><br><span class="line"> *     TreeNode() : val(<span class="number">0</span>), <span class="built_in">left</span>(nullptr), <span class="built_in">right</span>(nullptr) &#123;&#125;</span><br><span class="line"> *     TreeNode(int x) : val(x), <span class="built_in">left</span>(nullptr), <span class="built_in">right</span>(nullptr) &#123;&#125;</span><br><span class="line"> *     TreeNode(int x, TreeNode *<span class="built_in">left</span>, TreeNode *<span class="built_in">right</span>) : val(x), <span class="built_in">left</span>(<span class="built_in">left</span>), <span class="built_in">right</span>(<span class="built_in">right</span>) &#123;&#125;</span><br><span class="line"> * &#125;;</span><br><span class="line"> */</span><br><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    vector&lt;int&gt; postorderTraversal(TreeNode* root) &#123;</span><br><span class="line">        stack&lt;TreeNode*&gt; st;</span><br><span class="line">        vector&lt;int&gt; result;</span><br><span class="line">        <span class="keyword">if</span>(root == NULL)&#123;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">        st.push(root);</span><br><span class="line">        while(!st.empty())&#123;</span><br><span class="line">            TreeNode* node = st.<span class="built_in">top</span>();</span><br><span class="line">            st.pop();</span><br><span class="line">            result.push_back(node -&gt; val);</span><br><span class="line">            <span class="keyword">if</span>(node-&gt;<span class="built_in">left</span>) st.push(node-&gt;<span class="built_in">left</span>);</span><br><span class="line">            <span class="keyword">if</span>(node-&gt;<span class="built_in">right</span>) st.push(node-&gt;<span class="built_in">right</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        reverse(result.begin(),result.<span class="keyword">end</span>());</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="94-二叉树的中序遍历"><a href="#94-二叉树的中序遍历" class="headerlink" title="94. 二叉树的中序遍历"></a>94. 二叉树的中序遍历</h2><p>给你二叉树的根节点 root ，返回它节点值的中序遍历。</p>
<img src="/2022/06/05/record06/btExample03.jpg" class="" title="这是一张图片">
<figure class="highlight coq"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * <span class="keyword">Definition</span> <span class="keyword">for</span> a binary tree node.</span><br><span class="line"> * struct TreeNode &#123;</span><br><span class="line"> *     int val;</span><br><span class="line"> *     TreeNode *<span class="built_in">left</span>;</span><br><span class="line"> *     TreeNode *<span class="built_in">right</span>;</span><br><span class="line"> *     TreeNode() : val(<span class="number">0</span>), <span class="built_in">left</span>(nullptr), <span class="built_in">right</span>(nullptr) &#123;&#125;</span><br><span class="line"> *     TreeNode(int x) : val(x), <span class="built_in">left</span>(nullptr), <span class="built_in">right</span>(nullptr) &#123;&#125;</span><br><span class="line"> *     TreeNode(int x, TreeNode *<span class="built_in">left</span>, TreeNode *<span class="built_in">right</span>) : val(x), <span class="built_in">left</span>(<span class="built_in">left</span>), <span class="built_in">right</span>(<span class="built_in">right</span>) &#123;&#125;</span><br><span class="line"> * &#125;;</span><br><span class="line"> */</span><br><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    vector&lt;int&gt; inorderTraversal(TreeNode* root) &#123;</span><br><span class="line">        vector&lt;int&gt; result;</span><br><span class="line">        stack&lt;TreeNode*&gt; st;</span><br><span class="line">        TreeNode* cur = root;</span><br><span class="line">        while(cur != NULL |<span class="type">| !st</span>.empty())&#123;</span><br><span class="line">            <span class="keyword">if</span>(cur != NULL)&#123;</span><br><span class="line">                st.push(cur);</span><br><span class="line">                cur = cur-&gt;<span class="built_in">left</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                cur = st.<span class="built_in">top</span>();</span><br><span class="line">                st.pop();</span><br><span class="line">                result.push_back(cur-&gt;val);</span><br><span class="line">                cur = cur-&gt;<span class="built_in">right</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>为了方便理解，放c++环境中进行测试。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">treeNode</span> &#123;       <span class="comment">//树的结点</span></span><br><span class="line">	<span class="type">char</span> data;          <span class="comment">//保存数据</span></span><br><span class="line">	treeNode *left;     <span class="comment">//左子树</span></span><br><span class="line">	treeNode *right;    <span class="comment">//右子树</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建树</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">treeNode</span>* <span class="built_in">createNode</span>(<span class="type">char</span> data) &#123;</span><br><span class="line">	<span class="keyword">struct</span> <span class="title class_">treeNode</span>* newNode = (<span class="keyword">struct</span> treeNode*)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(<span class="keyword">struct</span> treeNode));</span><br><span class="line">	newNode-&gt;data = data;</span><br><span class="line">	newNode-&gt;left = <span class="literal">NULL</span>;</span><br><span class="line">	newNode-&gt;right = <span class="literal">NULL</span>;</span><br><span class="line">	<span class="keyword">return</span> newNode;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//连接结点</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insertNode</span><span class="params">(<span class="keyword">struct</span> treeNode* curNode, <span class="keyword">struct</span> treeNode* leftNode, <span class="keyword">struct</span> treeNode* rightNode)</span> </span>&#123;</span><br><span class="line">	curNode-&gt;left = leftNode;</span><br><span class="line">	curNode-&gt;right = rightNode;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//中序遍历</span></span><br><span class="line"><span class="function">vector&lt;<span class="type">char</span>&gt; <span class="title">iNorderTraversal</span><span class="params">(treeNode* root)</span> </span>&#123;</span><br><span class="line">	vector&lt;<span class="type">char</span>&gt; result;</span><br><span class="line">	stack&lt;treeNode*&gt; st;</span><br><span class="line">	treeNode* cur = root;</span><br><span class="line">	<span class="keyword">while</span> (cur != <span class="literal">NULL</span> || !st.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">		<span class="keyword">if</span> (cur != <span class="literal">NULL</span>) &#123;</span><br><span class="line">			st.<span class="built_in">push</span>(cur);</span><br><span class="line">			cur = cur-&gt;left;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			cur = st.<span class="built_in">top</span>();</span><br><span class="line">			st.<span class="built_in">pop</span>();</span><br><span class="line">			result.<span class="built_in">push_back</span>(cur-&gt;data);</span><br><span class="line">			cur = cur-&gt;right;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">//创建所有的结点</span></span><br><span class="line">	<span class="keyword">struct</span> <span class="title class_">treeNode</span>* A = <span class="built_in">createNode</span>(<span class="string">&#x27;A&#x27;</span>);</span><br><span class="line">	<span class="keyword">struct</span> <span class="title class_">treeNode</span>* B = <span class="built_in">createNode</span>(<span class="string">&#x27;B&#x27;</span>);</span><br><span class="line">	<span class="keyword">struct</span> <span class="title class_">treeNode</span>* C = <span class="built_in">createNode</span>(<span class="string">&#x27;C&#x27;</span>);</span><br><span class="line">	<span class="keyword">struct</span> <span class="title class_">treeNode</span>* D = <span class="built_in">createNode</span>(<span class="string">&#x27;D&#x27;</span>);</span><br><span class="line">	<span class="keyword">struct</span> <span class="title class_">treeNode</span>* E = <span class="built_in">createNode</span>(<span class="string">&#x27;E&#x27;</span>);</span><br><span class="line">	<span class="keyword">struct</span> <span class="title class_">treeNode</span>* F = <span class="built_in">createNode</span>(<span class="string">&#x27;F&#x27;</span>);</span><br><span class="line">	<span class="keyword">struct</span> <span class="title class_">treeNode</span>* G = <span class="built_in">createNode</span>(<span class="string">&#x27;G&#x27;</span>);</span><br><span class="line">	<span class="keyword">struct</span> <span class="title class_">treeNode</span>* K = <span class="built_in">createNode</span>(<span class="string">&#x27;K&#x27;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">//做连接操作</span></span><br><span class="line">	<span class="built_in">insertNode</span>(A, B, C);</span><br><span class="line">	<span class="built_in">insertNode</span>(B, D, E);</span><br><span class="line">	<span class="built_in">insertNode</span>(C, F, G);</span><br><span class="line">	<span class="built_in">insertNode</span>(F, <span class="literal">NULL</span>, K);</span><br><span class="line"></span><br><span class="line">	vector&lt;<span class="type">char</span>&gt; result1 = <span class="built_in">iNorderTraversal</span>(A);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i&lt;result1.<span class="built_in">size</span>(); ++i)</span><br><span class="line">	&#123;</span><br><span class="line"></span><br><span class="line">		cout &lt;&lt; result1[i] &lt;&lt; <span class="string">&quot;	&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我们通过insertNode和createNode创建如图所示的树</p>
<img src="/2022/06/05/record06/iNorderTraversal01.jpg" class="" title="这是一张图片">
<p>直接从iNorderTraversal的while循环开始：<br>第一次循环 cur !&#x3D; NULL 所以允许循环并且执行if条件语句</p>
<figure class="highlight arcade"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (cur != <span class="literal">NULL</span>) &#123;</span><br><span class="line">	st.<span class="built_in">push</span>(cur);</span><br><span class="line">	cur = cur-&gt;<span class="built_in">left</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<img src="/2022/06/05/record06/iNorderTraversal02.jpg" class="" title="这是一张图片">
<p>第二次循环 cur !&#x3D; NULL 所以允许循环并且执行if条件语句</p>
<figure class="highlight arcade"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (cur != <span class="literal">NULL</span>) &#123;</span><br><span class="line">	st.<span class="built_in">push</span>(cur);</span><br><span class="line">	cur = cur-&gt;<span class="built_in">left</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<img src="/2022/06/05/record06/iNorderTraversal03.jpg" class="" title="这是一张图片">
<p>第三次循环 cur !&#x3D; NULL 所以允许循环并且执行if条件语句</p>
<figure class="highlight arcade"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (cur != <span class="literal">NULL</span>) &#123;</span><br><span class="line">	st.<span class="built_in">push</span>(cur);</span><br><span class="line">	cur = cur-&gt;<span class="built_in">left</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<img src="/2022/06/05/record06/iNorderTraversal04.jpg" class="" title="这是一张图片">
<p>第四次循环 cur &#x3D;&#x3D; NULL 但 !st.empty() 为 true 所以允许循环并且执行else条件语句</p>
<figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">else&#123;</span><br><span class="line">		cur <span class="operator">=</span> st.top()<span class="comment">;</span></span><br><span class="line">		st.pop()<span class="comment">;</span></span><br><span class="line">		result.push_back(cur-&gt;data)<span class="comment">;</span></span><br><span class="line">		cur <span class="operator">=</span> cur-&gt;right<span class="comment">;</span></span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<img src="/2022/06/05/record06/iNorderTraversal05.jpg" class="" title="这是一张图片">
<p>第五次循环 cur &#x3D;&#x3D; NULL 但 !st.empty() 为 true 所以允许循环并且执行else条件语句</p>
<figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">else&#123;</span><br><span class="line">		cur <span class="operator">=</span> st.top()<span class="comment">;</span></span><br><span class="line">		st.pop()<span class="comment">;</span></span><br><span class="line">		result.push_back(cur-&gt;data)<span class="comment">;</span></span><br><span class="line">		cur <span class="operator">=</span> cur-&gt;right<span class="comment">;</span></span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<img src="/2022/06/05/record06/iNorderTraversal06.jpg" class="" title="这是一张图片">
<p>第六次循环 cur !&#x3D; NULL 所以允许循环并且执行if条件语句</p>
<figure class="highlight arcade"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (cur != <span class="literal">NULL</span>) &#123;</span><br><span class="line">	st.<span class="built_in">push</span>(cur);</span><br><span class="line">	cur = cur-&gt;<span class="built_in">left</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<img src="/2022/06/05/record06/iNorderTraversal07.jpg" class="" title="这是一张图片">
<p>第七次循环 cur &#x3D;&#x3D; NULL 但 !st.empty() 为 true 所以允许循环并且执行else条件语句</p>
<figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">else&#123;</span><br><span class="line">		cur <span class="operator">=</span> st.top()<span class="comment">;</span></span><br><span class="line">		st.pop()<span class="comment">;</span></span><br><span class="line">		result.push_back(cur-&gt;data)<span class="comment">;</span></span><br><span class="line">		cur <span class="operator">=</span> cur-&gt;right<span class="comment">;</span></span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<img src="/2022/06/05/record06/iNorderTraversal08.jpg" class="" title="这是一张图片">
<p>第八次循环 cur &#x3D;&#x3D; NULL 但 !st.empty() 为 true 所以允许循环并且执行else条件语句</p>
<figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">else&#123;</span><br><span class="line">		cur <span class="operator">=</span> st.top()<span class="comment">;</span></span><br><span class="line">		st.pop()<span class="comment">;</span></span><br><span class="line">		result.push_back(cur-&gt;data)<span class="comment">;</span></span><br><span class="line">		cur <span class="operator">=</span> cur-&gt;right<span class="comment">;</span></span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<img src="/2022/06/05/record06/iNorderTraversal09.jpg" class="" title="这是一张图片">
<p>…………<br>后面跟前面一样就不再赘述了~</p>
<h2 id="94-二叉树的中序遍历-统一迭代法"><a href="#94-二叉树的中序遍历-统一迭代法" class="headerlink" title="94. 二叉树的中序遍历(统一迭代法)"></a>94. 二叉树的中序遍历(统一迭代法)</h2><p>给你二叉树的根节点 root ，返回它节点值的中序遍历。</p>
<img src="/2022/06/05/record06/btExample03.jpg" class="" title="这是一张图片">
<figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Definition for a binary tree node.</span><br><span class="line"> * struct TreeNode &#123;</span><br><span class="line"> *     int val;</span><br><span class="line"> *     TreeNode *left;</span><br><span class="line"> *     TreeNode *right;</span><br><span class="line"> *     TreeNode() : val(<span class="number">0</span>), left(nullptr), right(nullptr) &#123;&#125;</span><br><span class="line"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span><br><span class="line"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125;</span><br><span class="line"> * &#125;;</span><br><span class="line"> */</span><br><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    vector<span class="tag">&lt;int&gt;</span> inorderTraversal(TreeNode* root) &#123;</span><br><span class="line">        stack<span class="tag">&lt;TreeNode*&gt;</span> st;</span><br><span class="line">        vector<span class="tag">&lt;int&gt;</span> result;</span><br><span class="line">        if(root != NULL)&#123;</span><br><span class="line">            st.push(root);</span><br><span class="line">        &#125;</span><br><span class="line">        while(!st.empty())&#123;</span><br><span class="line">            TreeNode* <span class="keyword">node</span> <span class="title">= st</span>.top();</span><br><span class="line">            if(<span class="keyword">node</span> <span class="title">!= NULL</span>)&#123;</span><br><span class="line">                st.pop();</span><br><span class="line">                if(<span class="keyword">node</span> <span class="title">-&gt; right</span>)&#123;</span><br><span class="line">                    st.push(<span class="keyword">node</span> <span class="title">-&gt; right</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                st.push(<span class="keyword">node</span><span class="title">);</span></span><br><span class="line"><span class="title">                st</span>.push(NULL);</span><br><span class="line">                if(<span class="keyword">node</span> <span class="title">-&gt; left</span>)&#123;</span><br><span class="line">                    st.push(<span class="keyword">node</span> <span class="title">-&gt; left</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                st.pop();</span><br><span class="line">                <span class="keyword">node</span> <span class="title">= st</span>.top();</span><br><span class="line">                st.pop();</span><br><span class="line">                result.push_back(<span class="keyword">node</span><span class="title">-&gt;val</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="94-二叉树的前序遍历-统一迭代法"><a href="#94-二叉树的前序遍历-统一迭代法" class="headerlink" title="94. 二叉树的前序遍历(统一迭代法)"></a>94. 二叉树的前序遍历(统一迭代法)</h2><p>给你二叉树的根节点 root ，返回它节点值的前序遍历。</p>
<img src="/2022/06/05/record06/btExample01.jpg" class="" title="这是一张图片">
<figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Definition for a binary tree node.</span><br><span class="line"> * struct TreeNode &#123;</span><br><span class="line"> *     int val;</span><br><span class="line"> *     TreeNode *left;</span><br><span class="line"> *     TreeNode *right;</span><br><span class="line"> *     TreeNode() : val(<span class="number">0</span>), left(nullptr), right(nullptr) &#123;&#125;</span><br><span class="line"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span><br><span class="line"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125;</span><br><span class="line"> * &#125;;</span><br><span class="line"> */</span><br><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    vector<span class="tag">&lt;int&gt;</span> preorderTraversal(TreeNode* root) &#123;</span><br><span class="line">        stack<span class="tag">&lt;TreeNode*&gt;</span> st;</span><br><span class="line">        vector<span class="tag">&lt;int&gt;</span> result;</span><br><span class="line">        if(root != NULL)&#123;</span><br><span class="line">            st.push(root);</span><br><span class="line">        &#125;</span><br><span class="line">        while(!st.empty())&#123;</span><br><span class="line">            TreeNode* <span class="keyword">node</span> <span class="title">= st</span>.top();</span><br><span class="line">            if(<span class="keyword">node</span> <span class="title">!= NULL</span>)&#123;</span><br><span class="line">                st.pop();</span><br><span class="line">                if(<span class="keyword">node</span><span class="title">-&gt;right</span>)&#123;</span><br><span class="line">                    st.push(<span class="keyword">node</span><span class="title">-&gt;right</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                if(<span class="keyword">node</span><span class="title">-&gt;left</span>)&#123;</span><br><span class="line">                    st.push(<span class="keyword">node</span><span class="title">-&gt;left</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                st.push(<span class="keyword">node</span><span class="title">);</span></span><br><span class="line"><span class="title">                st</span>.push(NULL);   </span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                st.pop();</span><br><span class="line">                <span class="keyword">node</span> <span class="title">= st</span>.top();</span><br><span class="line">                st.pop();</span><br><span class="line">                result.push_back(<span class="keyword">node</span><span class="title">-&gt;val</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>嵌入式</category>
        <category>c++</category>
      </categories>
      <tags>
        <tag>每周学习</tag>
        <tag>leetcode</tag>
        <tag>二叉树</tag>
      </tags>
  </entry>
  <entry>
    <title>Second learning record in June</title>
    <url>/2022/06/19/record07/</url>
    <content><![CDATA[<p>分享六月第二周学习内容</p>
<span id="more"></span>
<h1 id="动态规划往期回顾"><a href="#动态规划往期回顾" class="headerlink" title="动态规划往期回顾"></a>动态规划往期回顾</h1><p>进行一个温故而知新！<br>常规题目如果只有一个条件限制，一般设dp为一维数组。如果有多个条件，那就设dp为多维数组。<br>限制条件分两种：①最多数量②最多组合<br>最多组合分两种：①不分顺序②分顺序<br>背包分为①01背包，即限制物品的数量②完全背包，即不限制物品的数量</p>
<h2 id="最多数量-01背包"><a href="#最多数量-01背包" class="headerlink" title="最多数量 + 01背包"></a>最多数量 + 01背包</h2><p>解决模板：先遍历物品，从小到大；再遍历背包重量，从大到小遍历。<br>常用的状态方程：dp[j] &#x3D; max(dp[j] , dp[j - value[i]] + weight[i]) </p>
<h2 id="最多数量-完全背包"><a href="#最多数量-完全背包" class="headerlink" title="最多数量 + 完全背包"></a>最多数量 + 完全背包</h2><p>解决模板：先遍历物品，从小到大；再遍历背包重量，从小到大遍历。<br>常用的状态方程：dp[j] &#x3D; max(dp[j] , dp[j - value[i]] + weight[i]) </p>
<h2 id="最多组合-不分顺序-01背包"><a href="#最多组合-不分顺序-01背包" class="headerlink" title="最多组合 + 不分顺序 + 01背包"></a>最多组合 + 不分顺序 + 01背包</h2><p>解决模板：先遍历物品，从小到大；再遍历背包重量，从大到小遍历。<br>常用的状态方程：dp[j] +&#x3D; dp[j - coins[i]] </p>
<h2 id="最多组合-不分顺序-完全背包"><a href="#最多组合-不分顺序-完全背包" class="headerlink" title="最多组合 + 不分顺序 + 完全背包"></a>最多组合 + 不分顺序 + 完全背包</h2><p>解决模板：先遍历物品，从小到大；再遍历背包重量，从小到大遍历。<br>常用的状态方程：dp[j] +&#x3D; dp[j - coins[i]]</p>
<h2 id="最多组合-分顺序-完全背包"><a href="#最多组合-分顺序-完全背包" class="headerlink" title="最多组合 + 分顺序 + 完全背包"></a>最多组合 + 分顺序 + 完全背包</h2><p>解决模板：先遍历背包重量，从小到大；再遍历物体，从小到大遍历。<br>常用的状态方程：dp[j] +&#x3D; dp[j - coins[i]]</p>
<h1 id="二叉树入门学习"><a href="#二叉树入门学习" class="headerlink" title="二叉树入门学习"></a>二叉树入门学习</h1><h2 id="102-二叉树的层序遍历"><a href="#102-二叉树的层序遍历" class="headerlink" title="102. 二叉树的层序遍历"></a>102. 二叉树的层序遍历</h2><p>给你二叉树的根节点 root ，返回其节点值的层序遍历 。（即逐层地，从左到右访问所有节点）。</p>
<img src="/2022/06/19/record07/btExample01.jpg" class="" title="这是一张图片">
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">levelOrder</span>(TreeNode* root) &#123;</span><br><span class="line">        queue&lt;TreeNode*&gt; que;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; result;</span><br><span class="line">        <span class="keyword">if</span>(root != <span class="literal">NULL</span>)&#123;</span><br><span class="line">            que.<span class="built_in">push</span>(root);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(!que.<span class="built_in">empty</span>())&#123;</span><br><span class="line">            <span class="type">int</span> size = que.<span class="built_in">size</span>();</span><br><span class="line">            vector&lt;<span class="type">int</span>&gt; vec;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; size;i++)&#123;</span><br><span class="line">                TreeNode* cur = que.<span class="built_in">front</span>();</span><br><span class="line">                que.<span class="built_in">pop</span>();</span><br><span class="line">                vec.<span class="built_in">push_back</span>(cur-&gt;val);</span><br><span class="line">                <span class="keyword">if</span>(cur-&gt;left)&#123;</span><br><span class="line">                    que.<span class="built_in">push</span>(cur-&gt;left);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(cur-&gt;right)&#123;</span><br><span class="line">                    que.<span class="built_in">push</span>(cur-&gt;right);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            result.<span class="built_in">push_back</span>(vec);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="102-二叉树的层序遍历-1"><a href="#102-二叉树的层序遍历-1" class="headerlink" title="102. 二叉树的层序遍历"></a>102. 二叉树的层序遍历</h2><p>给你二叉树的根节点root，返回其节点值自底向上的层序遍历。（即按从叶子节点所在层到根节点所在的层，逐层从左向右遍历)</p>
<img src="/2022/06/19/record07/btExample02.jpg" class="" title="这是一张图片">
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">levelOrder</span>(TreeNode* root) &#123;</span><br><span class="line">        queue&lt;TreeNode*&gt; que;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; result;</span><br><span class="line">        <span class="keyword">if</span>(root != <span class="literal">NULL</span>)&#123;</span><br><span class="line">            que.<span class="built_in">push</span>(root);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(!que.<span class="built_in">empty</span>())&#123;</span><br><span class="line">            <span class="type">int</span> size = que.<span class="built_in">size</span>();</span><br><span class="line">            vector&lt;<span class="type">int</span>&gt; vec;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; size;i++)&#123;</span><br><span class="line">                TreeNode* cur = que.<span class="built_in">front</span>();</span><br><span class="line">                que.<span class="built_in">pop</span>();</span><br><span class="line">                vec.<span class="built_in">push_back</span>(cur-&gt;val);</span><br><span class="line">                <span class="keyword">if</span>(cur-&gt;left)&#123;</span><br><span class="line">                    que.<span class="built_in">push</span>(cur-&gt;left);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(cur-&gt;right)&#123;</span><br><span class="line">                    que.<span class="built_in">push</span>(cur-&gt;right);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            result.<span class="built_in">push_back</span>(vec);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">reverse</span>(result.<span class="built_in">begin</span>(),result.<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="199-二叉树的右视图"><a href="#199-二叉树的右视图" class="headerlink" title="199. 二叉树的右视图"></a>199. 二叉树的右视图</h2><p>给定一个二叉树的根节点 root，想象自己站在它的右侧，按照从顶部到底部的顺序，返回从右侧所能看到的节点值。</p>
<img src="/2022/06/19/record07/btExample03.jpg" class="" title="这是一张图片">
<figure class="highlight coq"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * <span class="keyword">Definition</span> <span class="keyword">for</span> a binary tree node.</span><br><span class="line"> * struct TreeNode &#123;</span><br><span class="line"> *     int val;</span><br><span class="line"> *     TreeNode *<span class="built_in">left</span>;</span><br><span class="line"> *     TreeNode *<span class="built_in">right</span>;</span><br><span class="line"> *     TreeNode() : val(<span class="number">0</span>), <span class="built_in">left</span>(nullptr), <span class="built_in">right</span>(nullptr) &#123;&#125;</span><br><span class="line"> *     TreeNode(int x) : val(x), <span class="built_in">left</span>(nullptr), <span class="built_in">right</span>(nullptr) &#123;&#125;</span><br><span class="line"> *     TreeNode(int x, TreeNode *<span class="built_in">left</span>, TreeNode *<span class="built_in">right</span>) : val(x), <span class="built_in">left</span>(<span class="built_in">left</span>), <span class="built_in">right</span>(<span class="built_in">right</span>) &#123;&#125;</span><br><span class="line"> * &#125;;</span><br><span class="line"> */</span><br><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    vector&lt;int&gt; rightSideView(TreeNode* root) &#123;</span><br><span class="line">        queue&lt;TreeNode*&gt; que;</span><br><span class="line">        vector&lt;int&gt; result;</span><br><span class="line">        <span class="keyword">if</span>(root != NULL)&#123;</span><br><span class="line">            que.push(root);</span><br><span class="line">        &#125;</span><br><span class="line">        while(!que.empty())&#123;</span><br><span class="line">            int size = que.size();</span><br><span class="line">            <span class="keyword">for</span>(int i = <span class="number">0</span>; i &lt; size;i++)&#123;</span><br><span class="line">                TreeNode* cur = que.front();</span><br><span class="line">                que.pop();</span><br><span class="line">                <span class="keyword">if</span>(i == (size - <span class="number">1</span>))&#123;</span><br><span class="line">                    result.push_back(cur-&gt;val);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(cur-&gt;<span class="built_in">left</span>)&#123;</span><br><span class="line">                    que.push(cur-&gt;<span class="built_in">left</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(cur-&gt;<span class="built_in">right</span>)&#123;</span><br><span class="line">                    que.push(cur-&gt;<span class="built_in">right</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="637-二叉树的层平均值"><a href="#637-二叉树的层平均值" class="headerlink" title="637. 二叉树的层平均值"></a>637. 二叉树的层平均值</h2><p>给定一个非空二叉树的根节点 root , 以数组的形式返回每一层节点的平均值。与实际答案相差 10-5 以内的答案可以被接受。</p>
<img src="/2022/06/19/record07/btExample04.jpg" class="" title="这是一张图片">
<figure class="highlight coq"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * <span class="keyword">Definition</span> <span class="keyword">for</span> a binary tree node.</span><br><span class="line"> * struct TreeNode &#123;</span><br><span class="line"> *     int val;</span><br><span class="line"> *     TreeNode *<span class="built_in">left</span>;</span><br><span class="line"> *     TreeNode *<span class="built_in">right</span>;</span><br><span class="line"> *     TreeNode() : val(<span class="number">0</span>), <span class="built_in">left</span>(nullptr), <span class="built_in">right</span>(nullptr) &#123;&#125;</span><br><span class="line"> *     TreeNode(int x) : val(x), <span class="built_in">left</span>(nullptr), <span class="built_in">right</span>(nullptr) &#123;&#125;</span><br><span class="line"> *     TreeNode(int x, TreeNode *<span class="built_in">left</span>, TreeNode *<span class="built_in">right</span>) : val(x), <span class="built_in">left</span>(<span class="built_in">left</span>), <span class="built_in">right</span>(<span class="built_in">right</span>) &#123;&#125;</span><br><span class="line"> * &#125;;</span><br><span class="line"> */</span><br><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    vector&lt;int&gt; rightSideView(TreeNode* root) &#123;</span><br><span class="line">        queue&lt;TreeNode*&gt; que;</span><br><span class="line">        vector&lt;<span class="built_in">double</span>&gt; result;</span><br><span class="line">        <span class="keyword">if</span>(root != NULL)&#123;</span><br><span class="line">            que.push(root);</span><br><span class="line">        &#125;</span><br><span class="line">        while(!que.empty())&#123;</span><br><span class="line">            <span class="built_in">double</span> size = que.size();</span><br><span class="line">            <span class="built_in">double</span> <span class="built_in">sum</span> = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(int i = <span class="number">0</span>; i &lt; size;i++)&#123;</span><br><span class="line">                TreeNode* cur = que.front();</span><br><span class="line">                que.pop();</span><br><span class="line">                <span class="built_in">sum</span> += cur-&gt;val;</span><br><span class="line">                <span class="keyword">if</span>(cur-&gt;<span class="built_in">left</span>)&#123;</span><br><span class="line">                    que.push(cur-&gt;<span class="built_in">left</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(cur-&gt;<span class="built_in">right</span>)&#123;</span><br><span class="line">                    que.push(cur-&gt;<span class="built_in">right</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            result.push_back(<span class="built_in">sum</span>/size);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>但我写成这样：</p>
<figure class="highlight coq"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * <span class="keyword">Definition</span> <span class="keyword">for</span> a binary tree node.</span><br><span class="line"> * struct TreeNode &#123;</span><br><span class="line"> *     int val;</span><br><span class="line"> *     TreeNode *<span class="built_in">left</span>;</span><br><span class="line"> *     TreeNode *<span class="built_in">right</span>;</span><br><span class="line"> *     TreeNode() : val(<span class="number">0</span>), <span class="built_in">left</span>(nullptr), <span class="built_in">right</span>(nullptr) &#123;&#125;</span><br><span class="line"> *     TreeNode(int x) : val(x), <span class="built_in">left</span>(nullptr), <span class="built_in">right</span>(nullptr) &#123;&#125;</span><br><span class="line"> *     TreeNode(int x, TreeNode *<span class="built_in">left</span>, TreeNode *<span class="built_in">right</span>) : val(x), <span class="built_in">left</span>(<span class="built_in">left</span>), <span class="built_in">right</span>(<span class="built_in">right</span>) &#123;&#125;</span><br><span class="line"> * &#125;;</span><br><span class="line"> */</span><br><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    vector&lt;int&gt; rightSideView(TreeNode* root) &#123;</span><br><span class="line">        queue&lt;TreeNode*&gt; que;</span><br><span class="line">        vector&lt;<span class="built_in">double</span>&gt; result;</span><br><span class="line">        <span class="keyword">if</span>(root != NULL)&#123;</span><br><span class="line">            que.push(root);</span><br><span class="line">        &#125;</span><br><span class="line">        while(!que.empty())&#123;</span><br><span class="line">            <span class="built_in">double</span> size = que.size();</span><br><span class="line">            <span class="built_in">double</span> <span class="built_in">sum</span> = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(int i = <span class="number">0</span>; i &lt; size;i++)&#123;</span><br><span class="line">                TreeNode* cur = que.front();</span><br><span class="line">                que.pop();</span><br><span class="line">                <span class="built_in">sum</span> = <span class="built_in">sum</span> + (cur-&gt;val)/size;</span><br><span class="line">                <span class="keyword">if</span>(cur-&gt;<span class="built_in">left</span>)&#123;</span><br><span class="line">                    que.push(cur-&gt;<span class="built_in">left</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(cur-&gt;<span class="built_in">right</span>)&#123;</span><br><span class="line">                    que.push(cur-&gt;<span class="built_in">right</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            result.push_back(<span class="built_in">sum</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>就会报错！！</p>
<img src="/2022/06/19/record07/btExample05.jpg" class="" title="这是一张图片">

<h2 id="429-N-叉树的层序遍历"><a href="#429-N-叉树的层序遍历" class="headerlink" title="429. N 叉树的层序遍历"></a>429. N 叉树的层序遍历</h2><p>给定一个 N 叉树，返回其节点值的层序遍历。（即从左到右，逐层遍历）。<br>树的序列化输入是用层序遍历，每组子节点都由 null 值分隔（参见示例）。</p>
<img src="/2022/06/19/record07/btExample06.jpg" class="" title="这是一张图片">
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">// Definition for a Node.</span></span><br><span class="line"><span class="comment">class Node &#123;</span></span><br><span class="line"><span class="comment">public:</span></span><br><span class="line"><span class="comment">    int val;</span></span><br><span class="line"><span class="comment">    vector&lt;Node*&gt; children;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    Node() &#123;&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    Node(int _val) &#123;</span></span><br><span class="line"><span class="comment">        val = _val;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    Node(int _val, vector&lt;Node*&gt; _children) &#123;</span></span><br><span class="line"><span class="comment">        val = _val;</span></span><br><span class="line"><span class="comment">        children = _children;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">levelOrder</span>(Node* root) &#123;</span><br><span class="line">        queue&lt;Node*&gt; que;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; result;</span><br><span class="line">        <span class="keyword">if</span>(root != <span class="literal">NULL</span>)&#123;</span><br><span class="line">            que.<span class="built_in">push</span>(root);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(!que.<span class="built_in">empty</span>())&#123;</span><br><span class="line">            vector&lt;<span class="type">int</span>&gt; vec;</span><br><span class="line">            <span class="type">int</span> size = que.<span class="built_in">size</span>();</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; size;i++)&#123;</span><br><span class="line">                Node* node = que.<span class="built_in">front</span>();</span><br><span class="line">                que.<span class="built_in">pop</span>();</span><br><span class="line">                vec.<span class="built_in">push_back</span>(node-&gt;val);</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; node-&gt;children.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(node-&gt;children[i])&#123;</span><br><span class="line">                        que.<span class="built_in">push</span>(node-&gt;children[i]);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            result.<span class="built_in">push_back</span>(vec);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="515-在每个树行中找最大值"><a href="#515-在每个树行中找最大值" class="headerlink" title="515. 在每个树行中找最大值"></a>515. 在每个树行中找最大值</h2><p>给定一棵二叉树的根节点 root ，请找出该二叉树中每一层的最大值。</p>
<img src="/2022/06/19/record07/btExample07.jpg" class="" title="这是一张图片">
<figure class="highlight sml"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * <span class="type">Definition</span> for a binary tree node.</span><br><span class="line"> * <span class="keyword">struct</span> <span class="type">TreeNode</span> &#123;</span><br><span class="line"> *     <span class="built_in">int</span> <span class="keyword">val</span>;</span><br><span class="line"> *     <span class="type">TreeNode</span> *left;</span><br><span class="line"> *     <span class="type">TreeNode</span> *right;</span><br><span class="line"> *     <span class="type">TreeNode</span><span class="literal">()</span> : <span class="keyword">val</span>(<span class="number">0</span>), left(nullptr), right(nullptr) &#123;&#125;</span><br><span class="line"> *     <span class="type">TreeNode</span>(<span class="built_in">int</span> x) : <span class="keyword">val</span>(x), left(nullptr), right(nullptr) &#123;&#125;</span><br><span class="line"> *     <span class="type">TreeNode</span>(<span class="built_in">int</span> x, <span class="type">TreeNode</span> *left, <span class="type">TreeNode</span> *right) : <span class="keyword">val</span>(x), left(left), right(right) &#123;&#125;</span><br><span class="line"> * &#125;;</span><br><span class="line"> */</span><br><span class="line">class <span class="type">Solution</span> &#123;</span><br><span class="line">public:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">int</span>&gt; largestValues(<span class="type">TreeNode</span>* root) &#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">int</span>&gt; result;</span><br><span class="line">        queue&lt;<span class="type">TreeNode</span>*&gt; que;</span><br><span class="line">        <span class="keyword">if</span>(root != <span class="type">NULL</span>)&#123;</span><br><span class="line">            que.push(root);</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">while</span>(!que.empty<span class="literal">()</span>)&#123;</span><br><span class="line">            <span class="built_in">int</span> size = que.size<span class="literal">()</span>;</span><br><span class="line">            <span class="built_in">int</span> m = <span class="type">INT_MIN</span>;</span><br><span class="line">            for(<span class="built_in">int</span> i = <span class="number">0</span>;i&lt; size;i++)&#123;</span><br><span class="line">                <span class="type">TreeNode</span>* cur = que.front<span class="literal">()</span>;</span><br><span class="line">                que.pop<span class="literal">()</span>;</span><br><span class="line">                <span class="keyword">if</span>(m &lt; cur-&gt;<span class="keyword">val</span>)&#123;</span><br><span class="line">                    m = cur-&gt;<span class="keyword">val</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(cur-&gt;left)&#123;</span><br><span class="line">                    que.push(cur-&gt;left);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(cur-&gt;right)&#123;</span><br><span class="line">                    que.push(cur-&gt;right);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            result.push_back(m);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="116-填充每个节点的下一个右侧节点指针"><a href="#116-填充每个节点的下一个右侧节点指针" class="headerlink" title="116. 填充每个节点的下一个右侧节点指针"></a>116. 填充每个节点的下一个右侧节点指针</h2><p>给定一个 完美二叉树 ，其所有叶子节点都在同一层，每个父节点都有两个子节点。填充它的每个 next 指针，让这个指针指向其下一个右侧节点。如果找不到下一个右侧节点，则将 next 指针设置为 NULL。<br>初始状态下，所有 next 指针都被设置为 NULL。</p>
<img src="/2022/06/19/record07/btExample08.jpg" class="" title="这是一张图片">
<figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line">/*</span><br><span class="line">// <span class="type">Definition</span> for a <span class="type">Node</span>.</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="type">Node</span> &#123;</span></span><br><span class="line"><span class="class">public:</span></span><br><span class="line"><span class="class">    int val;</span></span><br><span class="line"><span class="class">    <span class="type">Node</span>* left;</span></span><br><span class="line"><span class="class">    <span class="type">Node</span>* right;</span></span><br><span class="line"><span class="class">    <span class="type">Node</span>* next;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">    <span class="type">Node</span>() : val(0), left(<span class="type">NULL</span>), right(<span class="type">NULL</span>), next(<span class="type">NULL</span>) &#123;&#125;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">    <span class="type">Node</span>(<span class="title">int</span> <span class="title">_val</span>) : val(<span class="title">_val</span>), left(<span class="type">NULL</span>), right(<span class="type">NULL</span>), next(<span class="type">NULL</span>) &#123;&#125;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">    <span class="type">Node</span>(<span class="title">int</span> <span class="title">_val</span>, <span class="type">Node</span>* <span class="title">_left</span>, <span class="type">Node</span>* <span class="title">_right</span>, <span class="type">Node</span>* <span class="title">_next</span>)</span></span><br><span class="line"><span class="class">        : val(<span class="title">_val</span>), left(<span class="title">_left</span>), right(<span class="title">_right</span>), next(<span class="title">_next</span>) &#123;&#125;</span></span><br><span class="line"><span class="class">&#125;;</span></span><br><span class="line"><span class="class">*/</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="type">Solution</span> &#123;</span></span><br><span class="line"><span class="class">public:</span></span><br><span class="line"><span class="class">    <span class="type">Node</span>* connect(<span class="type">Node</span>* <span class="title">root</span>) &#123;</span></span><br><span class="line"><span class="class">        queue&lt;<span class="type">Node</span>*&gt; que;</span></span><br><span class="line"><span class="class">        if(<span class="title">root</span> != <span class="type">NULL</span>)&#123;</span></span><br><span class="line"><span class="class">            que.push(<span class="title">root</span>);</span></span><br><span class="line"><span class="class">        &#125;</span></span><br><span class="line"><span class="class">        while(!<span class="title">que</span>.<span class="title">empty</span>())&#123;</span></span><br><span class="line"><span class="class">            <span class="type">Node</span>* cur;</span></span><br><span class="line"><span class="class">            <span class="type">Node</span>* preCur;</span></span><br><span class="line"><span class="class">            int size = que.size();</span></span><br><span class="line"><span class="class">            for(<span class="title">int</span> <span class="title">i</span> = 0; <span class="title">i</span> &lt; <span class="title">size</span>;<span class="title">i</span>++)&#123;</span></span><br><span class="line"><span class="class">                if(<span class="title">i</span> == 0)&#123;</span></span><br><span class="line"><span class="class">                    preCur = que.front();</span></span><br><span class="line"><span class="class">                    que.pop();</span></span><br><span class="line"><span class="class">                    cur = preCur;</span></span><br><span class="line"><span class="class">                &#125;else&#123;</span></span><br><span class="line"><span class="class">                    cur = que.front();</span></span><br><span class="line"><span class="class">                    que.pop();</span></span><br><span class="line"><span class="class">                    preCur-&gt;next = cur;</span></span><br><span class="line"><span class="class">                    preCur = preCur-&gt;next;</span></span><br><span class="line"><span class="class">                &#125;  </span></span><br><span class="line"><span class="class">                if(<span class="title">cur</span>-&gt;<span class="title">left</span>)&#123;</span></span><br><span class="line"><span class="class">                    que.push(<span class="title">cur</span>-&gt;<span class="title">left</span>);</span></span><br><span class="line"><span class="class">                &#125; </span></span><br><span class="line"><span class="class">                if(<span class="title">cur</span>-&gt;<span class="title">right</span>)&#123;</span></span><br><span class="line"><span class="class">                    que.push(<span class="title">cur</span>-&gt;<span class="title">right</span>);</span></span><br><span class="line"><span class="class">                &#125;      </span></span><br><span class="line"><span class="class">            &#125;</span></span><br><span class="line"><span class="class">            cur-&gt;next = <span class="type">NULL</span>; </span></span><br><span class="line"><span class="class">        &#125;</span></span><br><span class="line"><span class="class">        return root;</span></span><br><span class="line"><span class="class">    &#125;</span></span><br><span class="line"><span class="class">&#125;;</span></span><br></pre></td></tr></table></figure>

<h2 id="117-填充每个节点的下一个右侧节点指针-II"><a href="#117-填充每个节点的下一个右侧节点指针-II" class="headerlink" title="117. 填充每个节点的下一个右侧节点指针 II"></a>117. 填充每个节点的下一个右侧节点指针 II</h2><p>给定一个 二叉树 填充它的每个 next 指针，让这个指针指向其下一个右侧节点。如果找不到下一个右侧节点，则将 next 指针设置为 NULL。<br>初始状态下，所有 next 指针都被设置为 NULL。</p>
<img src="/2022/06/19/record07/btExample09.jpg" class="" title="这是一张图片">
<figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line">/*</span><br><span class="line">// Definition for a Node.</span><br><span class="line">class <span class="keyword">Node</span> <span class="title">&#123;</span></span><br><span class="line"><span class="title">public</span>:</span><br><span class="line">    int val;</span><br><span class="line">    <span class="keyword">Node</span><span class="title">* left</span>;</span><br><span class="line">    <span class="keyword">Node</span><span class="title">* right</span>;</span><br><span class="line">    <span class="keyword">Node</span><span class="title">* next</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">Node</span><span class="title">() : val</span>(<span class="number">0</span>), left(NULL), right(NULL), next(NULL) &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">Node</span><span class="title">(int</span> _val) : val(_val), left(NULL), right(NULL), next(NULL) &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">Node</span><span class="title">(int</span> _val, <span class="keyword">Node</span><span class="title">* _left</span>, <span class="keyword">Node</span><span class="title">* _right</span>, <span class="keyword">Node</span><span class="title">* _next</span>)</span><br><span class="line">        : val(_val), left(_left), right(_right), next(_next) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    <span class="keyword">Node</span><span class="title">* connect</span>(<span class="keyword">Node</span><span class="title">* root</span>) &#123;</span><br><span class="line">        queue<span class="tag">&lt;Node*&gt;</span> que;</span><br><span class="line">        if(root != NULL)&#123;</span><br><span class="line">            que.push(root);</span><br><span class="line">        &#125;</span><br><span class="line">        while(!que.empty())&#123;</span><br><span class="line">            <span class="keyword">Node</span><span class="title">* node</span>;</span><br><span class="line">            <span class="keyword">Node</span><span class="title">* nodePre</span>;</span><br><span class="line">            int size = que.size();</span><br><span class="line">            for(int i = <span class="number">0</span>;i <span class="tag">&lt; size;i++)&#123;</span></span><br><span class="line"><span class="tag">                if( i == 0 )&#123;</span></span><br><span class="line"><span class="tag">                    nodePre = que.front();</span></span><br><span class="line"><span class="tag">                    que.pop();</span></span><br><span class="line"><span class="tag">                    node = nodePre;</span></span><br><span class="line"><span class="tag">                &#125;else&#123;</span></span><br><span class="line"><span class="tag">                    node = que.front();</span></span><br><span class="line"><span class="tag">                    que.pop();</span></span><br><span class="line"><span class="tag">                    nodePre-&gt;</span>next = <span class="keyword">node</span><span class="title">;</span></span><br><span class="line"><span class="title">                    nodePre</span> = nodePre-&gt;next;</span><br><span class="line">                &#125;</span><br><span class="line">                if(<span class="keyword">node</span><span class="title">-&gt;left</span>)&#123;</span><br><span class="line">                    que.push(<span class="keyword">node</span><span class="title">-&gt;left</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                if(<span class="keyword">node</span><span class="title">-&gt;right</span>)&#123;</span><br><span class="line">                    que.push(<span class="keyword">node</span><span class="title">-&gt;right</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            nodePre-&gt;next = NULL;</span><br><span class="line">        &#125;</span><br><span class="line">        return root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="226-翻转二叉树"><a href="#226-翻转二叉树" class="headerlink" title="226. 翻转二叉树"></a>226. 翻转二叉树</h2><p>给你一棵二叉树的根节点 root ，翻转这棵二叉树，并返回其根节点。</p>
<img src="/2022/06/19/record07/btExample10.jpg" class="" title="这是一张图片">
<figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Definition for a binary tree node.</span><br><span class="line"> * struct TreeNode &#123;</span><br><span class="line"> *     int val;</span><br><span class="line"> *     TreeNode *left;</span><br><span class="line"> *     TreeNode *right;</span><br><span class="line"> *     TreeNode() : val(<span class="number">0</span>), left(nullptr), right(nullptr) &#123;&#125;</span><br><span class="line"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span><br><span class="line"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125;</span><br><span class="line"> * &#125;;</span><br><span class="line"> */</span><br><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    TreeNode* invertTree(TreeNode* root) &#123;</span><br><span class="line">        queue<span class="tag">&lt;TreeNode*&gt;</span> que;</span><br><span class="line">        if(root != NULL)&#123;</span><br><span class="line">            que.push(root);</span><br><span class="line">        &#125;</span><br><span class="line">        while(!que.empty())&#123;</span><br><span class="line">            int size = que.size();</span><br><span class="line">            TreeNode* <span class="keyword">node</span> <span class="title">= que</span>.front();</span><br><span class="line">            TreeNode* cur = <span class="keyword">node</span><span class="title">-&gt;left</span>;</span><br><span class="line">            <span class="keyword">node</span><span class="title">-&gt;left</span> = <span class="keyword">node</span><span class="title">-&gt;right</span>;</span><br><span class="line">            <span class="keyword">node</span><span class="title">-&gt;right</span> = cur;</span><br><span class="line">            que.pop();</span><br><span class="line">            if(<span class="keyword">node</span><span class="title">-&gt;left</span>)&#123;</span><br><span class="line">                que.push(<span class="keyword">node</span><span class="title">-&gt;left</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            if(<span class="keyword">node</span><span class="title">-&gt;right</span>)&#123;</span><br><span class="line">                que.push(<span class="keyword">node</span><span class="title">-&gt;right</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="101-对称二叉树"><a href="#101-对称二叉树" class="headerlink" title="101. 对称二叉树"></a>101. 对称二叉树</h2><p>给你一个二叉树的根节点 root ，检查它是否轴对称。</p>
<img src="/2022/06/19/record07/btExample11.jpg" class="" title="这是一张图片">
<figure class="highlight coq"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * <span class="keyword">Definition</span> <span class="keyword">for</span> a binary tree node.</span><br><span class="line"> * struct TreeNode &#123;</span><br><span class="line"> *     int val;</span><br><span class="line"> *     TreeNode *<span class="built_in">left</span>;</span><br><span class="line"> *     TreeNode *<span class="built_in">right</span>;</span><br><span class="line"> *     TreeNode() : val(<span class="number">0</span>), <span class="built_in">left</span>(nullptr), <span class="built_in">right</span>(nullptr) &#123;&#125;</span><br><span class="line"> *     TreeNode(int x) : val(x), <span class="built_in">left</span>(nullptr), <span class="built_in">right</span>(nullptr) &#123;&#125;</span><br><span class="line"> *     TreeNode(int x, TreeNode *<span class="built_in">left</span>, TreeNode *<span class="built_in">right</span>) : val(x), <span class="built_in">left</span>(<span class="built_in">left</span>), <span class="built_in">right</span>(<span class="built_in">right</span>) &#123;&#125;</span><br><span class="line"> * &#125;;</span><br><span class="line"> */</span><br><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    bool <span class="built_in">compare</span>(TreeNode* <span class="built_in">left</span>,TreeNode* <span class="built_in">right</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">left</span> == NULL &amp;&amp; <span class="built_in">right</span> != NULL)&#123;</span><br><span class="line">            <span class="keyword">return</span> false;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">left</span> != NULL &amp;&amp; <span class="built_in">right</span> == NULL)&#123;</span><br><span class="line">            <span class="keyword">return</span> false;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">left</span> == NULL &amp;&amp; <span class="built_in">right</span> == NULL)&#123;</span><br><span class="line">            <span class="keyword">return</span> true;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>((<span class="built_in">left</span>-&gt;val != <span class="built_in">right</span>-&gt;val))&#123;</span><br><span class="line">            <span class="keyword">return</span> false;</span><br><span class="line">        &#125;</span><br><span class="line">        bool compareOutside = <span class="built_in">compare</span>(<span class="built_in">left</span>-&gt;<span class="built_in">left</span>,<span class="built_in">right</span>-&gt;<span class="built_in">right</span>);</span><br><span class="line">        bool compareInside = <span class="built_in">compare</span>(<span class="built_in">left</span>-&gt;<span class="built_in">right</span>,<span class="built_in">right</span>-&gt;<span class="built_in">left</span>);</span><br><span class="line">        bool compareLast = compareOutside &amp;&amp; compareInside;</span><br><span class="line">        <span class="keyword">return</span> compareLast;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    bool isSymmetric(TreeNode* root) &#123;</span><br><span class="line">        <span class="keyword">if</span>(root == NULL)&#123;</span><br><span class="line">            <span class="keyword">return</span> true;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">compare</span>(root-&gt;<span class="built_in">left</span>,root-&gt;<span class="built_in">right</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>或者</p>
<figure class="highlight coq"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * <span class="keyword">Definition</span> <span class="keyword">for</span> a binary tree node.</span><br><span class="line"> * struct TreeNode &#123;</span><br><span class="line"> *     int val;</span><br><span class="line"> *     TreeNode *<span class="built_in">left</span>;</span><br><span class="line"> *     TreeNode *<span class="built_in">right</span>;</span><br><span class="line"> *     TreeNode() : val(<span class="number">0</span>), <span class="built_in">left</span>(nullptr), <span class="built_in">right</span>(nullptr) &#123;&#125;</span><br><span class="line"> *     TreeNode(int x) : val(x), <span class="built_in">left</span>(nullptr), <span class="built_in">right</span>(nullptr) &#123;&#125;</span><br><span class="line"> *     TreeNode(int x, TreeNode *<span class="built_in">left</span>, TreeNode *<span class="built_in">right</span>) : val(x), <span class="built_in">left</span>(<span class="built_in">left</span>), <span class="built_in">right</span>(<span class="built_in">right</span>) &#123;&#125;</span><br><span class="line"> * &#125;;</span><br><span class="line"> */</span><br><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    bool isSymmetric(TreeNode* root) &#123;</span><br><span class="line">        queue&lt;TreeNode*&gt; que;</span><br><span class="line">        <span class="keyword">if</span>(root == NULL)&#123;</span><br><span class="line">            <span class="keyword">return</span> true;</span><br><span class="line">        &#125;</span><br><span class="line">        que.push(root-&gt;<span class="built_in">left</span>);</span><br><span class="line">        que.push(root-&gt;<span class="built_in">right</span>);</span><br><span class="line">        while(!que.empty())&#123;</span><br><span class="line">            TreeNode* leftNode = que.front();</span><br><span class="line">            que.pop();</span><br><span class="line">            TreeNode* rightNode = que.front();</span><br><span class="line">            que.pop();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>( !leftNode &amp;&amp; !rightNode )&#123;</span><br><span class="line">                continue;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>( !leftNode |<span class="type">| !rightNode</span> |<span class="type">| (leftNode</span>-&gt;val != rightNode-&gt;val))&#123;</span><br><span class="line">                <span class="keyword">return</span> false;</span><br><span class="line">            &#125;</span><br><span class="line">            que.push(leftNode-&gt;<span class="built_in">left</span>);</span><br><span class="line">            que.push(rightNode-&gt;<span class="built_in">right</span>);</span><br><span class="line">            que.push(leftNode-&gt;<span class="built_in">right</span>);</span><br><span class="line">            que.push(rightNode-&gt;<span class="built_in">left</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> true;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>嵌入式</category>
        <category>c++</category>
      </categories>
      <tags>
        <tag>每周学习</tag>
        <tag>leetcode</tag>
        <tag>动态规划</tag>
        <tag>二叉树</tag>
        <tag>往期回顾</tag>
      </tags>
  </entry>
</search>
